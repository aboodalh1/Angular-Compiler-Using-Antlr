<?php
// Product Management Application - Generated by Angular Compiler
// PHP Server-Side Implementation

// Error reporting for development
error_reporting(E_ALL);
ini_set('display_errors', 1);

// Set content type and character encoding
header('Content-Type: text/html; charset=UTF-8');

// Start session
session_start();

// Database Configuration
class DatabaseConfig
{
    private $host = 'localhost';
    private $dbname = 'product_management';
    private $username = 'root';
    private $password = '';
    private $pdo;

    public function __construct()
    {
        try {
            $this->pdo = new PDO(
                'mysql:host=' . $this->host . ';dbname=' . $this->dbname . ';charset=utf8mb4',
                $this->username,
                $this->password
            );
            $this->pdo->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);
        } catch (PDOException $e) {
            die('Database connection failed: ' . $e->getMessage());
        }
    }

    public function getConnection()
    {
        return $this->pdo;
    }
}

// Create database instance
$db = new DatabaseConfig();
$pdo = $db->getConnection();

// Product Class
class Product
{
    public $id;
    public $name;
    public $description;
    public $price;
    public $imageUrl;
    public $category;
    public $createdAt;

    public function __construct($data = [])
    {
        foreach ($data as $key => $value) {
            if (property_exists($this, $key)) {
                $this->$key = $value;
            }
        }
    }
}

// Product Manager Class
class ProductManager
{
    private $pdo;

    public function __construct($pdo)
    {
        $this->pdo = $pdo;
    }

    // Add new product
    public function addProduct($productData)
    {
        $sql = 'INSERT INTO products (name, description, price, imageUrl, category) VALUES (?, ?, ?, ?, ?)';

        try {
            $stmt = $this->pdo->prepare($sql);
            $stmt->execute([
                $productData['name'],
                $productData['description'],
                $productData['price'],
                $productData['imageUrl'] ?? 'placeholder.jpg',
                $productData['category']
            ]);

            $productData['id'] = $this->pdo->lastInsertId();
            return new Product($productData);
        } catch (PDOException $e) {
            throw new Exception('Failed to add product');
        }
    }

    // Get all products
    public function getAllProducts()
    {
        $sql = 'SELECT * FROM products ORDER BY createdAt DESC';

        try {
            $stmt = $this->pdo->query($sql);
            $products = [];

            while ($data = $stmt->fetch(PDO::FETCH_ASSOC)) {
                $products[] = new Product($data);
            }

            return $products;
        } catch (PDOException $e) {
            throw new Exception('Failed to fetch products');
        }
    }
}

// Create product manager instance
$productManager = new ProductManager($pdo);

// Main Application Logic
function renderProducts()
{
    global $productManager;

    try {
        $products = $productManager->getAllProducts();

        if (empty($products)) {
            echo '<div class="no-products-message">No products available</div>';
        } else {
            echo '<div class="products-grid">';
            foreach ($products as $product) {
                echo generateProductCard($product);
            }
            echo '</div>';
        }
    } catch (Exception $e) {
        echo '<div class="error-message">Error loading products</div>';
    }
}

function generateProductCard($product)
{
    return '<div class="product-card">' .
        '<h3>' . htmlspecialchars($product->name) . '</h3>' .
        '<p>' . htmlspecialchars($product->description) . '</p>' .
        '<span class="price">' . number_format($product->price, 2) . '$</span>' .
        '</div>';
}

// Handle form submission
if ($_SERVER['REQUEST_METHOD'] === 'POST' && isset($_POST['name'])) {
    try {
        $productData = [
            'name' => $_POST['name'],
            'description' => $_POST['description'],
            'price' => floatval($_POST['price']),
            'imageUrl' => $_POST['imageUrl'] ?? 'placeholder.jpg',
            'category' => $_POST['category']
        ];

        $product = $productManager->addProduct($productData);
        echo '<div class="success-message">Product added successfully!</div>';
    } catch (Exception $e) {
        echo '<div class="error-message">خطأ في إضافة المنتج</div>';
    }
}
