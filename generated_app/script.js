// Product Management Application - Generated by Angular Compiler
// State Management and CRUD Operations

(function() {
  'use strict';
  
  // State Management System
  class StateManager {
    constructor() {
      this.state = {
        // Product State
        products: [],
        currentProduct: null,
        selectedProductId: null,
        productFilters: {
          search: '',
          category: '',
          sortBy: 'newest',
          priceRange: { min: 0, max: Infinity }
        },
        // UI State
        ui: {
          currentView: 'grid',
          currentPage: 1,
          productsPerPage: 12,
          isLoading: false,
          activeTab: 'description',
          showAddForm: false,
          showEditForm: false
        },
        // Navigation State
        navigation: {
          currentSection: 'add-product',
          history: [],
          breadcrumbs: []
        },
        // Cart & Wishlist State
        cart: [],
        wishlist: [],
        // Notification State
        notifications: []
      };
      
      this.subscribers = new Map();
      this.stateId = 0;
    }
    
    // Subscribe to state changes
    subscribe(key, callback) {
      if (!this.subscribers.has(key)) {
        this.subscribers.set(key, new Set());
      }
      this.subscribers.get(key).add(callback);
      return () => this.subscribers.get(key).delete(callback);
    }
    
    // Notify subscribers of state changes
    notify(key, oldValue, newValue) {
      if (this.subscribers.has(key)) {
        this.subscribers.get(key).forEach(callback => {
          try {
            callback(oldValue, newValue, this.state);
          } catch (error) {
            console.error('Error in state subscriber:', error);
          }
        });
      }
    }
    
    // Update state with notification
    setState(updates) {
      const oldState = { ...this.state };
      
      Object.keys(updates).forEach(key => {
        if (this.state.hasOwnProperty(key)) {
          const oldValue = this.state[key];
          this.state[key] = { ...this.state[key], ...updates[key] };
          this.notify(key, oldValue, this.state[key]);
        }
      });
      
      this.stateId++;
      this.persistState();
    }
    
    // Get state value
    getState(key) {
      return key ? this.state[key] : this.state;
    }
    
    // Product State Management
    setProducts(products) {
      this.setState({ products });
    }
    
    addProduct(product) {
      const products = [...this.state.products, product];
      this.setState({ products });
      this.addNotification('تم إضافة المنتج بنجاح', 'success');
    }
    
    updateProduct(productId, updates) {
      const products = this.state.products.map(p =>
        p.id === productId ? { ...p, ...updates, updatedAt: new Date().toISOString() } : p
      );
      this.setState({ products });
      this.addNotification('تم تحديث المنتج بنجاح', 'success');
    }
    
    deleteProduct(productId) {
      const products = this.state.products.filter(p => p.id !== productId);
      this.setState({ products });
      this.addNotification('تم حذف المنتج بنجاح', 'success');
    }
    
    setCurrentProduct(product) {
      this.setState({ currentProduct: product, selectedProductId: product?.id });
    }
    
    // Filter State Management
    setFilter(key, value) {
      const productFilters = { ...this.state.productFilters, [key]: value };
      this.setState({ productFilters });
    }
    
    clearFilters() {
      this.setState({
        productFilters: {
          search: '',
          category: '',
          sortBy: 'newest',
          priceRange: { min: 0, max: Infinity }
        }
      });
    }
    
    // UI State Management
    setUIState(updates) {
      this.setState({ ui: { ...this.state.ui, ...updates } });
    }
    
    setCurrentView(view) {
      this.setUIState({ currentView: view });
    }
    
    setCurrentPage(page) {
      this.setUIState({ currentPage: page });
    }
    
    setActiveTab(tab) {
      this.setUIState({ activeTab: tab });
    }
    
    // Navigation State Management
    navigateTo(section, data = {}) {
      const navigation = {
        currentSection: section,
        history: [...this.state.navigation.history, this.state.navigation.currentSection],
        breadcrumbs: this.generateBreadcrumbs(section, data)
      };
      
      this.setState({ navigation });
      this.updateURL(section);
    }
    
    goBack() {
      if (this.state.navigation.history.length > 0) {
        const previousSection = this.state.navigation.history.pop();
        const navigation = {
          currentSection: previousSection,
          history: this.state.navigation.history,
          breadcrumbs: this.generateBreadcrumbs(previousSection)
        };
        
        this.setState({ navigation });
        this.updateURL(previousSection);
      }
    }
    
    generateBreadcrumbs(section, data = {}) {
      const breadcrumbs = [
        { name: 'الرئيسية', section: 'add-product' }
      ];
      
      switch (section) {
        case 'products':
          breadcrumbs.push({ name: 'المنتجات', section: 'products' });
        break;
        case 'product-details':
          breadcrumbs.push({ name: 'المنتجات', section: 'products' });
          if (data.productName) {
            breadcrumbs.push({ name: data.productName, section: 'product-details' });
          }
        break;
      }
      
      return breadcrumbs;
    }
    
    updateURL(section) {
      const url = new URL(window.location);
      url.hash = section;
      window.history.pushState({}, '', url);
    }
    
    // Cart State Management
    addToCart(product, quantity = 1) {
      const existingItem = this.state.cart.find(item => item.id === product.id);
      
      if (existingItem) {
        existingItem.quantity += quantity;
        this.setState({ cart: [...this.state.cart] });
      } else {
        const cart = [...this.state.cart, { ...product, quantity }];
        this.setState({ cart });
      }
      
      this.addNotification(`تم إضافة ${product.name} إلى السلة`, 'success');
    }
    
    removeFromCart(productId) {
      const cart = this.state.cart.filter(item => item.id !== productId);
      this.setState({ cart });
    }
    
    updateCartQuantity(productId, quantity) {
      if (quantity <= 0) {
        this.removeFromCart(productId);
      } else {
        const cart = this.state.cart.map(item =>
          item.id === productId ? { ...item, quantity } : item
        );
        this.setState({ cart });
      }
    }
    
    // Wishlist State Management
    addToWishlist(product) {
      if (!this.state.wishlist.find(item => item.id === product.id)) {
        const wishlist = [...this.state.wishlist, product];
        this.setState({ wishlist });
        this.addNotification(`تم إضافة ${product.name} إلى المفضلة`, 'success');
      }
    }
    
    removeFromWishlist(productId) {
      const wishlist = this.state.wishlist.filter(item => item.id !== productId);
      this.setState({ wishlist });
    }
    
    // Notification State Management
    addNotification(message, type = 'info', duration = 5000) {
      const notification = {
        id: Date.now(),
        message,
        type,
        timestamp: new Date().toISOString()
      };
      
      const notifications = [...this.state.notifications, notification];
      this.setState({ notifications });
      
      // Auto-remove notification after duration
      setTimeout(() => {
        this.removeNotification(notification.id);
      }, duration);
    }
    
    removeNotification(id) {
      const notifications = this.state.notifications.filter(n => n.id !== id);
      this.setState({ notifications });
    }
    
    // State Persistence
    persistState() {
      try {
        const stateToPersist = {
          products: this.state.products,
          cart: this.state.cart,
          wishlist: this.state.wishlist,
          productFilters: this.state.productFilters
        };
        localStorage.setItem('productManagerState', JSON.stringify(stateToPersist));
      } catch (error) {
        console.error('Error persisting state:', error);
      }
    }
    
    loadPersistedState() {
      try {
        const persisted = localStorage.getItem('productManagerState');
        if (persisted) {
          const parsed = JSON.parse(persisted);
          this.setState({
            products: parsed.products || [],
            cart: parsed.cart || [],
            wishlist: parsed.wishlist || [],
            productFilters: parsed.productFilters || this.state.productFilters
          });
        }
      } catch (error) {
        console.error('Error loading persisted state:', error);
      }
    }
    
    // Get computed state
    getFilteredProducts() {
      let products = [...this.state.products];
      
      // Apply search filter
      if (this.state.productFilters.search) {
        const searchTerm = this.state.productFilters.search.toLowerCase();
        products = products.filter(product =>
          product.name.toLowerCase().includes(searchTerm) ||
          product.description.toLowerCase().includes(searchTerm) ||
          product.category.toLowerCase().includes(searchTerm)
        );
      }
      
      // Apply category filter
      if (this.state.productFilters.category) {
        products = products.filter(product => product.category === this.state.productFilters.category);
        }
        
        // Apply price filter
        products = products.filter(product =>
          product.price >= this.state.productFilters.priceRange.min &&
          product.price <= this.state.productFilters.priceRange.max
        );
        
        // Apply sorting
        switch (this.state.productFilters.sortBy) {
          case 'newest':
            products.sort((a, b) => new Date(b.createdAt) - new Date(a.createdAt));
          break;
          case 'oldest':
            products.sort((a, b) => new Date(a.createdAt) - new Date(b.createdAt));
          break;
          case 'price-low':
            products.sort((a, b) => a.price - b.price);
          break;
          case 'price-high':
            products.sort((a, b) => b.price - a.price);
          break;
          case 'name-az':
            products.sort((a, b) => a.name.localeCompare(b.name, 'ar'));
          break;
          case 'name-za':
            products.sort((a, b) => b.name.localeCompare(a.name, 'ar'));
          break;
        }
        
        return products;
      }
      
      getPaginatedProducts() {
        const filtered = this.getFilteredProducts();
        const startIndex = (this.state.ui.currentPage - 1) * this.state.ui.productsPerPage;
        const endIndex = startIndex + this.state.ui.productsPerPage;
        return filtered.slice(startIndex, endIndex);
      }
      
      getCartTotal() {
        return this.state.cart.reduce((total, item) => total + (item.price * item.quantity), 0);
      }
      
      getCartItemCount() {
        return this.state.cart.reduce((count, item) => count + item.quantity, 0);
      }
    }
    
    // Create global state manager instance
    const stateManager = new StateManager();
    
    // Product Manager Class
    class ProductManager {
      constructor() {
        this.products = [];
        this.currentProduct = null;
        this.nextId = 1;
      }
      
      // Add new product
      addProduct(productData) {
        const product = {
          id: this.generateId(),
          ...productData,
          createdAt: new Date().toISOString(),
          updatedAt: new Date().toISOString()
        };
        
        this.products.push(product);
        // Update state manager
        if (window.stateManager) {
          window.stateManager.setState({ products: [...this.products] });
        }
        this.saveToLocalStorage();
        return product;
      }
      
      // Get product by ID
      getProduct(id) {
        // Convert id to number if it's a string
        const numId = typeof id === 'string' ? parseInt(id) : id;
        return this.products.find(p => p.id === numId);
      }
      
      // Update product
      updateProduct(id, updates) {
        const numId = typeof id === 'string' ? parseInt(id) : id;
        const index = this.products.findIndex(p => p.id === numId);
        if (index !== -1) {
          this.products[index] = {
            ...this.products[index],
            ...updates,
            updatedAt: new Date().toISOString()
          };
          // Update state manager
          if (window.stateManager) {
            window.stateManager.setState({ products: [...this.products] });
          }
          this.saveToLocalStorage();
          return this.products[index];
        }
        return null;
      }
      
      // Delete product
      deleteProduct(id) {
        const numId = typeof id === 'string' ? parseInt(id) : id;
        const index = this.products.findIndex(p => p.id === numId);
        if (index !== -1) {
          this.products.splice(index, 1);
          // Update state manager
          if (window.stateManager) {
            window.stateManager.setState({ products: [...this.products] });
          }
          this.saveToLocalStorage();
          return true;
        }
        return false;
      }
      
      // Get all products
      getAllProducts() {
        return [...this.products];
      }
      
      // Get products by category
      getProductsByCategory(category) {
        return this.products.filter(p => p.category === category);
      }
      
      // Search products
      searchProducts(query) {
        const lowerQuery = query.toLowerCase();
        return this.products.filter(p =>
          p.name.toLowerCase().includes(lowerQuery) ||
          p.description.toLowerCase().includes(lowerQuery) ||
          p.category.toLowerCase().includes(lowerQuery)
        );
      }
      
      // Generate unique ID
      generateId() {
        return this.nextId++;
      }
      
      // Save to localStorage
      saveToLocalStorage() {
        try {
          localStorage.setItem('products', JSON.stringify(this.products));
          localStorage.setItem('nextId', this.nextId.toString());
        } catch (error) {
          console.error('Error saving to localStorage:', error);
        }
      }
      
      // Load from localStorage
      loadFromLocalStorage() {
        try {
          const savedProducts = localStorage.getItem('products');
          const savedNextId = localStorage.getItem('nextId');
          
          if (savedProducts) {
            this.products = JSON.parse(savedProducts);
          }
          
          if (savedNextId) {
            this.nextId = parseInt(savedNextId);
          }
        } catch (error) {
          console.error('Error loading from localStorage:', error);
        }
      }
    }
    
    // Create global product manager instance
    const productManager = new ProductManager();
    
    // CRUD Operations
    const ProductOperations = {
      // Create - Add new product
      create: (productData) => {
        stateManager.setState({ loading: true, error: null });
        
        try {
          const product = productManager.addProduct(productData);
          stateManager.setState({ loading: false });
          Utils.showNotification('تم إضافة المنتج بنجاح', 'success');
          return product;
        } catch (error) {
          stateManager.setState({ loading: false, error: error.message });
          Utils.showNotification('خطأ في إضافة المنتج', 'error');
          throw error;
        }
      },
      
      // Read - Get products
      read: (id = null) => {
        if (id) {
          return productManager.getProduct(id);
        }
        return productManager.getAllProducts();
      },
      
      // Update - Modify product
      update: (id, updates) => {
        stateManager.setState({ loading: true, error: null });
        
        try {
          const product = productManager.updateProduct(id, updates);
          if (product) {
            stateManager.setState({ loading: false });
            Utils.showNotification('تم تحديث المنتج بنجاح', 'success');
            return product;
          } else {
            throw new Error('المنتج غير موجود');
          }
        } catch (error) {
          stateManager.setState({ loading: false, error: error.message });
          Utils.showNotification('خطأ في تحديث المنتج', 'error');
          throw error;
        }
      },
      
      // Delete - Remove product
      delete: (id) => {
        stateManager.setState({ loading: true, error: null });
        
        try {
          const success = productManager.deleteProduct(id);
          if (success) {
            stateManager.setState({ loading: false });
            Utils.showNotification('تم حذف المنتج بنجاح', 'success');
            return true;
          } else {
            throw new Error('المنتج غير موجود');
          }
        } catch (error) {
          stateManager.setState({ loading: false, error: error.message });
          Utils.showNotification('خطأ في حذف المنتج', 'error');
        }
      }
    };
    
    // UI Event Handlers
    const EventHandlers = {
      // Handle form submission
      handleAddProduct: (event) => {
        event.preventDefault();
        
        const formData = new FormData(event.target);
        const productData = {
          name: formData.get('productName'),
          description: formData.get('productDescription'),
          price: parseFloat(formData.get('productPrice')),
          category: formData.get('productCategory'),
          imageUrl: formData.get('productImage') || 'placeholder.svg'
        };
        
        try {
          ProductOperations.create(productData);
          event.target.reset();
          Utils.scrollToSection('products');
        } catch (error) {
          console.error('Error adding product:', error);
        }
      },
      
      // Handle product deletion
      handleDeleteProduct: (id) => {
        if (confirm('هل أنت متأكد من حذف هذا المنتج؟')) {
          try {
            ProductOperations.delete(id);
          } catch (error) {
            console.error('Error deleting product:', error);
          }
        }
      },
      
      // Handle product editing
      handleEditProduct: (id) => {
        const product = productManager.getProduct(id);
        if (product) {
          // Populate form with product data
          document.getElementById('productName').value = product.name;
          document.getElementById('productDescription').value = product.description;
          document.getElementById('productPrice').value = product.price;
          document.getElementById('productCategory').value = product.category;
          document.getElementById('productImage').value = product.imageUrl;
          
          // Change form to edit mode
          const form = document.getElementById('addProductForm');
          form.dataset.editMode = 'true';
          form.dataset.editId = id;
          
          // Update submit button
          const submitBtn = form.querySelector('button[type="submit"]');
          submitBtn.innerHTML = '<i class="fas fa-save"></i> تحديث المنتج';
          
          Utils.scrollToSection('add-product');
        }
      },
      
      // Handle product view
      handleViewProduct: (id) => {
        const product = productManager.getProduct(id);
        if (product) {
          displayProductDetails(product);
          Utils.scrollToSection('product-details');
        }
      }
    };
    
    // Utility Functions
    const Utils = {
      // Scroll to section
      scrollToSection: (sectionId) => {
        const section = document.getElementById(sectionId);
        if (section) {
          section.scrollIntoView({ behavior: 'smooth' });
        }
      },
      
      // Show notification
      showNotification: (message, type = 'info') => {
        console.log('Showing notification:', { message, type });
        
        const notification = document.createElement('div');
        notification.className = `notification notification-${type}`;
        notification.textContent = message;
        
        // Add CSS styles
        notification.style.cssText = `
          position: fixed;
          top: 20px;
          right: 20px;
          padding: 15px 20px;
          border-radius: 8px;
          color: white;
          font-weight: bold;
          z-index: 10000;
          max-width: 400px;
          box-shadow: 0 4px 12px rgba(0,0,0,0.15);
          transform: translateX(100%);
          transition: transform 0.3s ease;
          font-family: Arial, sans-serif;
          font-size: 14px;
        `;
        
        // Set background color based on type
        switch (type) {
          case 'success':
            notification.style.background = '#16a34a';
            break;
          case 'error':
            notification.style.background = '#dc2626';
            break;
          case 'warning':
            notification.style.background = '#ca8a04';
            break;
          case 'info':
          default:
            notification.style.background = '#0891b2';
            break;
        }
        
        document.body.appendChild(notification);
        console.log('Notification added to DOM');
        
        // Animate in
        setTimeout(() => {
          notification.style.transform = 'translateX(0)';
        }, 100);
        
        // Auto remove after 3 seconds
        setTimeout(() => {
          notification.style.transform = 'translateX(100%)';
          setTimeout(() => {
            if (notification.parentNode) {
              notification.parentNode.removeChild(notification);
              console.log('Notification removed from DOM');
            }
          }, 300);
        }, 3000);
      },
      
      // Format price
      formatPrice: (price) => {
        return new Intl.NumberFormat('en-US', {
          style: 'currency',
          currency: 'USD'
        }).format(price);
      },
      
      // Format date
      formatDate: (dateString) => {
        return new Date(dateString).toLocaleDateString('ar-SA');
      }
    };
    
    // Initialize application when DOM is ready
    document.addEventListener('DOMContentLoaded', () => {
      // Load saved products
      productManager.loadFromLocalStorage();
      
      // Show add-product section by default
      const addProductSection = document.getElementById('add-product');
      const productsSection = document.getElementById('products');
      const productDetailsSection = document.getElementById('product-details');
      
      if (addProductSection) addProductSection.style.display = 'block';
      if (productsSection) productsSection.style.display = 'none';
      if (productDetailsSection) productDetailsSection.style.display = 'none';
      
      // Initial render - delayed to ensure window.productManager is available
      setTimeout(() => {
        if (window.renderProducts) {
          window.renderProducts();
        }
      }, 200);
      
      // Subscribe to state changes
      stateManager.subscribe((state) => {
        if (window.renderProducts) {
          window.renderProducts();
        }
      });
      
      // Set up event listeners after a short delay to ensure all functions are available
      setTimeout(() => {
        setupEventListeners();
      }, 100);
    });
    
    // Setup event listeners
    function setupEventListeners() {
      console.log('setupEventListeners called');
      
      // Add product form - تحقق من عدم وجود معالج أحداث مزدوج
      const addProductForm = document.getElementById('addProductForm');
      console.log('Add product form found:', addProductForm);
      
      if (addProductForm && !addProductForm.hasAttribute('data-basic-events-bound')) {
        // Use basic form handling directly since EnhancedEventHandlers may not be available
        addProductForm.addEventListener('submit', (e) => {
          console.log('Form submit event triggered');
          
          // Use basic form handling directly
          console.log('Using basic form handling');
          handleBasicFormSubmit(e);
        });
        
        addProductForm.setAttribute('data-basic-events-bound', 'true');
        console.log('Basic form submit event listener added to form');
      } else {
        console.log('Form already has event listeners or not found');
      }
      
      // Image upload preview
      const imageInput = document.getElementById('productImages');
      if (imageInput) {
        imageInput.addEventListener('change', (e) => {
          console.log('Image input changed');
          const files = e.target.files;
          const imagePreview = document.getElementById('imagePreview');
          
          if (imagePreview && files && files.length > 0) {
            imagePreview.innerHTML = '';
            
            // Show preview of selected images
            Array.from(files).forEach((file, index) => {
              if (file.type.startsWith('image/')) {
                const img = document.createElement('img');
                img.src = URL.createObjectURL(file);
                img.alt = `Preview ${index + 1}`;
                img.style.width = '100px';
                img.style.height = '100px';
                img.style.objectFit = 'cover';
                img.style.margin = '5px';
                img.style.border = '1px solid #ddd';
                img.style.borderRadius = '5px';
                
                imagePreview.appendChild(img);
                console.log('Image preview added for:', file.name);
              }
            });
          }
        });
        console.log('Image input event listener added');
      }
      
      // Navigation links
      const navLinks = document.querySelectorAll('.nav-link');
      console.log('Navigation links found:', navLinks.length);
      
      navLinks.forEach(link => {
        link.addEventListener('click', (e) => {
          e.preventDefault();
          const targetId = link.getAttribute('href').substring(1);
          console.log('Navigation link clicked:', targetId);
          
          // Hide all sections first
          const allSections = document.querySelectorAll('.section');
          allSections.forEach(section => section.style.display = 'none');
          
          // Show target section
          const targetSection = document.getElementById(targetId);
          if (targetSection) {
            targetSection.style.display = 'block';
            console.log('Target section shown:', targetId);
            
            // If showing products section, render products
            if (targetId === 'products') {
              setTimeout(() => {
                if (window.renderProducts) {
                    window.renderProducts();
                }
              }, 100);
            }
          } else {
            console.error('Target section not found:', targetId);
          }
        });
      });
      
      // Add search and filter event listeners
      const searchInput = document.getElementById('searchProducts');
      if (searchInput) {
        searchInput.addEventListener('input', (e) => {
          const query = e.target.value;
          if (window.searchProducts) {
            window.searchProducts(query);
          }
        });
        console.log('Search input event listener added');
      }
      
      const categoryFilter = document.getElementById('categoryFilter');
      if (categoryFilter) {
        categoryFilter.addEventListener('change', (e) => {
          const category = e.target.value;
          if (window.filterByCategory) {
            window.filterByCategory(category);
          }
        });
        console.log('Category filter event listener added');
      }
      
      const sortSelect = document.getElementById('sortProducts');
      if (sortSelect) {
        sortSelect.addEventListener('change', (e) => {
          const sortType = e.target.value;
          if (window.sortProducts) {
            window.sortProducts(sortType);
          }
        });
        console.log('Sort select event listener added');
      }
      
      console.log('Event listeners setup completed');
    }
    
    // Basic form handling fallback
    function handleBasicFormSubmit(e) {
      console.log('handleBasicFormSubmit called');
      e.preventDefault();
      
      const formData = new FormData(e.target);
      console.log('Form data:', formData);
      
      // Handle image upload
      let imageUrl = 'placeholder.svg'; // Default image
      const imageInput = e.target.querySelector('#productImages');
      const imagePreview = document.getElementById('imagePreview');
      
      // Check if we're in edit mode and handle current image
      const submitBtn = e.target.querySelector('button[type="submit"]');
      const isEditMode = submitBtn && submitBtn.dataset.editMode === 'true';
      
      if (isEditMode && imagePreview && imagePreview.dataset.currentImageUrl) {
        // In edit mode, check if image was changed
        if (imageInput && imageInput.files && imageInput.files.length > 0) {
          // New image selected
          const file = imageInput.files[0];
          console.log('New image file selected:', file);
          imageUrl = URL.createObjectURL(file);
          console.log('New image URL created:', imageUrl);
        } else {
          // No new image, keep current image
          const currentImageUrl = imagePreview.dataset.currentImageUrl;
          if (currentImageUrl && currentImageUrl !== 'placeholder.svg') {
            imageUrl = currentImageUrl;
            console.log('Keeping current image:', imageUrl);
          }
        }
      } else if (imageInput && imageInput.files && imageInput.files.length > 0) {
        // New product with image
        const file = imageInput.files[0];
        console.log('Image file selected:', file);
        imageUrl = URL.createObjectURL(file);
        console.log('Image URL created:', imageUrl);
      }
      
      const productData = {
        name: formData.get('productName'),
        description: formData.get('productDescription'),
        price: parseFloat(formData.get('productPrice')),
        category: formData.get('productCategory'),
        stock: parseInt(formData.get('productStock')) || 0,
        brand: formData.get('productBrand'),
        model: formData.get('productModel'),
        weight: parseFloat(formData.get('productWeight')) || 0,
        dimensions: formData.get('productDimensions'),
        features: formData.get('productFeatures')?.split('\n').filter(f => f.trim()) || [],
        imageUrl: imageUrl
      };
      
      console.log('Product data:', productData);
      
      // Basic validation
      if (!productData.name || !productData.description || !productData.price || !productData.category) {
        console.log('Validation failed:', { name: !!productData.name, description: !!productData.description, price: !!productData.price, category: !!productData.category });
        if (window.Utils) {
            window.Utils.showNotification('Please fill in all required fields', 'error');
        } else {
            alert('Please fill in all required fields');
        }
        return;
      }
      
      console.log('Validation passed, processing product...');
      
      // Check if we're in edit mode
      if (submitBtn && submitBtn.dataset.editMode === 'true') {
        const productId = submitBtn.dataset.editId;
        console.log('Updating product in basic form:', productId);
        
        try {
          // Use local productManager if available, otherwise use window.productManager
          const manager = productManager || window.productManager;
          if (!manager) {
              console.error('productManager not available');
              alert('Error: Product manager not available');
              return;
          }
          
          const updatedProduct = manager.updateProduct(productId, productData);
          if (updatedProduct) {
            if (window.Utils) {
                window.Utils.showNotification('Product updated successfully!', 'success');
            } else {
                alert('Product updated successfully!');
            }
            console.log('Product updated successfully:', updatedProduct);
            
            // Reset button
            submitBtn.textContent = 'Save Product';
            submitBtn.dataset.editMode = 'false';
            delete submitBtn.dataset.editId;
            
            // Reset form
            e.target.reset();
            
            // Clear image preview and show upload area
            const imagePreview = document.getElementById('imagePreview');
            const imageUploadArea = document.getElementById('imageUploadArea');
            if (imagePreview) {
                imagePreview.innerHTML = '';
                delete imagePreview.dataset.currentImageUrl;
            }
            if (imageUploadArea) {
                imageUploadArea.style.display = 'block';
            }
            
            // Navigate to products view
            const addProductSection = document.getElementById('add-product');
            const productsSection = document.getElementById('products');
            const productDetailsSection = document.getElementById('product-details');
            
            if (addProductSection) addProductSection.style.display = 'none';
            if (productsSection) productsSection.style.display = 'block';
            if (productDetailsSection) productDetailsSection.style.display = 'none';
            
            // Render products
            setTimeout(() => {
              if (window.renderProducts) {
                  window.renderProducts();
              }
            }, 100);
          } else {
            if (window.Utils) {
                window.Utils.showNotification('Failed to update product', 'error');
            } else {
                alert('Failed to update product');
            }
            console.error('Failed to update product');
          }
        } catch (error) {
          console.error('Error updating product:', error);
          if (window.Utils) {
              window.Utils.showNotification('Error updating product: ' + error.message, 'error');
          } else {
              alert('Error updating product: ' + error.message);
          }
        }
      } else {
        // Add new product
        try {
          // Use local productManager if available, otherwise use window.productManager
          const manager = productManager || window.productManager;
          if (!manager) {
              console.error('productManager not available');
              alert('خطأ: مدير المنتجات غير متاح');
              return;
          }
          
          const product = manager.addProduct(productData);
          console.log('Product added successfully:', product);
          
          if (window.Utils) {
              window.Utils.showNotification('Product added successfully!', 'success');
          } else {
              alert('Product added successfully!');
          }
          
          // Reset form
          e.target.reset();
          
          // Clear image preview
          const imagePreview = document.getElementById('imagePreview');
          if (imagePreview) {
              imagePreview.innerHTML = '';
          }
          
          // Navigate to products view
          const addProductSection = document.getElementById('add-product');
          const productsSection = document.getElementById('products');
          
          if (addProductSection) addProductSection.style.display = 'none';
          if (productsSection) productsSection.style.display = 'block';
          
          // Render products
          setTimeout(() => {
            if (window.renderProducts) {
                window.renderProducts();
            }
          }, 100);
          
        } catch (error) {
          console.error('Error adding product:', error);
          if (window.Utils) {
              window.Utils.showNotification('Error adding product: ' + error.message, 'error');
          } else {
              alert('Error adding product: ' + error.message);
          }
        }
      }
    }
      
      // Add displayProductDetails function
      window.displayProductDetails = function(product) {
          console.log('Displaying product details:', product);
          
          // Hide placeholder and show template
          const placeholder = document.querySelector('.product-details-placeholder');
          const template = document.getElementById('productDetailsTemplate');
          
          if (placeholder) {
              placeholder.style.display = 'none';
              console.log('Placeholder hidden');
          }
          
          if (template) {
              template.style.display = 'block';
              console.log('Template shown');
          }
          
          // Update product title
          const productTitle = document.getElementById('productDetailTitle');
          if (productTitle) {
              productTitle.textContent = product.name;
              console.log('Set product title to:', product.name);
          }
          
          // Update breadcrumb name
          const breadcrumbName = document.getElementById('productBreadcrumbName');
          if (breadcrumbName) {
              breadcrumbName.textContent = product.name;
              console.log('Set breadcrumb name to:', product.name);
          }
          
          // Update category badge
          const categoryBadge = document.getElementById('productDetailCategory');
          if (categoryBadge) {
              categoryBadge.textContent = product.category || 'Not specified';
              console.log('Set category badge to:', product.category);
          }
          
          // Update brand
          const brandElement = document.getElementById('productDetailBrand');
          if (brandElement) {
              brandElement.textContent = product.brand || 'Not specified';
              console.log('Set brand to:', product.brand);
          }
          
          // Update model
          const modelElement = document.getElementById('productDetailModel');
          if (modelElement) {
              modelElement.textContent = product.model || 'Not specified';
              console.log('Set model to:', product.model);
          }
          
          // Update main image
          const mainImage = document.getElementById('productMainImage');
          if (mainImage) {
              mainImage.src = product.imageUrl || 'placeholder.svg';
              mainImage.alt = product.name;
              console.log('Set main image to:', product.imageUrl);
          }
          
          // Update price
          const priceElement = document.getElementById('productDetailPrice');
          if (priceElement) {
              priceElement.textContent = window.Utils.formatPrice(product.price);
              console.log('Set price to:', window.Utils.formatPrice(product.price));
          }
          
          // Update stock
          const stockElement = document.getElementById('productDetailStock');
          if (stockElement) {
              stockElement.textContent = product.stock || 0;
              console.log('Set stock to:', product.stock);
          }
          
          // Update weight
          const weightElement = document.getElementById('productDetailWeight');
          if (weightElement) {
              weightElement.textContent = product.weight ? `${product.weight} كجم` : '-';
              console.log('Set weight to:', product.weight);
          }
          
          // Update dimensions
          const dimensionsElement = document.getElementById('productDetailDimensions');
          if (dimensionsElement) {
              dimensionsElement.textContent = product.dimensions || '-';
              console.log('Set dimensions to:', product.dimensions);
          }
          
          // Update description
          const descriptionElement = document.getElementById('productDetailDescription');
          if (descriptionElement) {
              descriptionElement.textContent = product.description || 'No description available';
              console.log('Set description to:', product.description);
          }
          
          // Update features
          const featuresList = document.getElementById('featuresList');
          if (featuresList) {
              featuresList.innerHTML = '';
              if (product.features && Array.isArray(product.features) && product.features.length > 0) {
                  product.features.forEach(feature => {
                      const li = document.createElement('li');
                      li.textContent = feature;
                      featuresList.appendChild(li);
                  });
                  console.log('Set features:', product.features);
              } else {
                  const li = document.createElement('li');
                  li.textContent = 'No specific features';
                  featuresList.appendChild(li);
                  console.log('No features found');
              }
          }
          
          console.log('Product details displayed successfully');
      };
        
        // Add missing zoomImage function
        window.zoomImage = function() {
            const mainImage = document.querySelector('#product-details .main-image img');
            if (mainImage) {
                // Create a modal for zoomed image
                const modal = document.createElement('div');
                modal.style.cssText = `
                    position: fixed;
                    top: 0;
                    left: 0;
                    width: 100%;
                    height: 100%;
                    background: rgba(0,0,0,0.8);
                    display: flex;
                    justify-content: center;
                    align-items: center;
                    z-index: 10000;
                    cursor: pointer;
                `;
                
                const img = document.createElement('img');
                img.src = mainImage.src;
                img.style.cssText = `
                    max-width: 90%;
                    max-height: 90%;
                    object-fit: contain;
                `;
                
                modal.appendChild(img);
                modal.onclick = () => modal.remove();
                document.body.appendChild(modal);
            }
        };
        
        // Add missing functions
        window.showAddProductForm = function() {
            const addProductSection = document.getElementById('add-product');
            const productsSection = document.getElementById('products');
            const productDetailsSection = document.getElementById('product-details');
            
            if (addProductSection) addProductSection.style.display = 'block';
            if (productsSection) productsSection.style.display = 'none';
            if (productDetailsSection) productDetailsSection.style.display = 'none';
            
            // Reset form if it exists and we're not in edit mode
            const form = document.getElementById('addProductForm');
            if (form) {
                const submitBtn = form.querySelector('button[type="submit"]');
                const isEditMode = submitBtn && submitBtn.dataset.editMode === 'true';
                
                if (!isEditMode) {
                    form.reset();
                    console.log('Form reset in showAddProductForm (not in edit mode)');
                    
                    // Reset submit button
                    if (submitBtn) {
                        submitBtn.textContent = 'Save Product';
                        submitBtn.dataset.editMode = 'false';
                        delete submitBtn.dataset.editId;
                        console.log('Submit button reset in showAddProductForm');
                    }
                    
                    // Clear image preview and show upload area
                    const imagePreview = document.getElementById('imagePreview');
                    const imageUploadArea = document.getElementById('imageUploadArea');
                    if (imagePreview) {
                        imagePreview.innerHTML = '';
                        delete imagePreview.dataset.currentImageUrl;
                        console.log('Image preview cleared in showAddProductForm');
                    }
                    if (imageUploadArea) {
                        imageUploadArea.style.display = 'block';
                        console.log('Upload area shown in showAddProductForm');
                    }
                } else {
                    console.log('Form not reset - in edit mode');
                    
                    // Show upload area if there's no current image
                    const imagePreview = document.getElementById('imagePreview');
                    const imageUploadArea = document.getElementById('imageUploadArea');
                    if (imagePreview && imageUploadArea) {
                        const currentImageContainer = document.getElementById('currentImageContainer');
                        if (!currentImageContainer) {
                            imageUploadArea.style.display = 'block';
                        }
                    }
                }
            }
        };
        
        window.showProductsList = function() {
            const addProductSection = document.getElementById('add-product');
            const productsSection = document.getElementById('products');
            const productDetailsSection = document.getElementById('product-details');
            
            if (addProductSection) addProductSection.style.display = 'none';
            if (productsSection) productsSection.style.display = 'block';
            if (productDetailsSection) productDetailsSection.style.display = 'none';
            
            // Refresh products display
            setTimeout(() => {
                window.renderProducts();
            }, 100);
            
            console.log('Products list shown');
        };
        
        window.showProductDetails = function() {
            const addProductSection = document.getElementById('add-product');
            const productsSection = document.getElementById('products');
            const productDetailsSection = document.getElementById('product-details');
            
            if (addProductSection) addProductSection.style.display = 'none';
            if (productsSection) productsSection.style.display = 'none';
            if (productDetailsSection) productDetailsSection.style.display = 'block';
            
            console.log('Product details shown');
        };
        
        // Add CRUD operation functions
        window.editProduct = function(productId) {
            console.log('Editing product:', productId);
            const product = window.productManager.getProduct(productId);
            console.log('Found product:', product);
            
            if (product) {
                // Show add product form first
                window.showAddProductForm();
                
                // Wait a bit for the form to be visible, then fill the data
                setTimeout(() => {
                    // Fill the form with product data
                    const nameField = document.getElementById('productName');
                    const categoryField = document.getElementById('productCategory');
                    const priceField = document.getElementById('productPrice');
                    const stockField = document.getElementById('productStock');
                    const descriptionField = document.getElementById('productDescription');
                    const brandField = document.getElementById('productBrand');
                    const modelField = document.getElementById('productModel');
                    const featuresField = document.getElementById('productFeatures');
                    const weightField = document.getElementById('productWeight');
                    const dimensionsField = document.getElementById('productDimensions');
                    
                    console.log('Filling form fields with:', product);
                    
                    if (nameField) {
                        nameField.value = product.name || '';
                        console.log('Set name field to:', product.name);
                    }
                    if (categoryField) {
                        categoryField.value = product.category || '';
                        console.log('Set category field to:', product.category);
                    }
                    if (priceField) {
                        priceField.value = product.price || '';
                        console.log('Set price field to:', product.price);
                    }
                    if (stockField) {
                        stockField.value = product.stock || '';
                        console.log('Set stock field to:', product.stock);
                    }
                    if (descriptionField) {
                        descriptionField.value = product.description || '';
                        console.log('Set description field to:', product.description);
                    }
                    if (brandField) {
                        brandField.value = product.brand || '';
                        console.log('Set brand field to:', product.brand);
                    }
                    if (modelField) {
                        modelField.value = product.model || '';
                        console.log('Set model field to:', product.model);
                    }
                    if (featuresField) {
                        featuresField.value = Array.isArray(product.features) ? product.features.join('\n') : (product.features || '');
                        console.log('Set features field to:', product.features);
                    }
                    if (weightField) {
                        weightField.value = product.weight || '';
                        console.log('Set weight field to:', product.weight);
                    }
                    if (dimensionsField) {
                        dimensionsField.value = product.dimensions || '';
                        console.log('Set dimensions field to:', product.dimensions);
                    }
                    
                    // Handle current product image
                    const imagePreview = document.getElementById('imagePreview');
                    const imageUploadArea = document.getElementById('imageUploadArea');
                    const currentImageContainer = document.getElementById('currentImageContainer');
                    
                    if (imagePreview && product.imageUrl && product.imageUrl !== 'placeholder.svg') {
                        // Create current image display
                        if (!currentImageContainer) {
                            const container = document.createElement('div');
                            container.id = 'currentImageContainer';
                            container.className = 'current-image-container';
                            container.innerHTML = `
                                <h4>Current Image:</h4>
                                <div class="current-image-wrapper">
                                    <img src="${product.imageUrl}" alt="Current product image" class="current-product-image">
                                    <div class="current-image-actions">
                                        <button type="button" class="btn btn-danger btn-sm" onclick="removeCurrentImage()">
                                            <i class="fas fa-trash"></i> Remove
                                        </button>
                                        <button type="button" class="btn btn-info btn-sm" onclick="replaceCurrentImage()">
                                            <i class="fas fa-exchange-alt"></i> Replace
                                        </button>
                                    </div>
                                </div>
                            `;
                            imagePreview.appendChild(container);
                        }
                        
                        // Hide upload area initially
                        if (imageUploadArea) {
                            imageUploadArea.style.display = 'none';
                        }
                    }
                    
                    // Store current image URL for reference
                    if (imagePreview) {
                        imagePreview.dataset.currentImageUrl = product.imageUrl || '';
                    }
                    
                    // Change submit button text
                    const submitBtn = document.querySelector('#add-product button[type="submit"]');
                    if (submitBtn) {
                        submitBtn.textContent = 'Update Product';
                        submitBtn.dataset.editMode = 'true';
                        submitBtn.dataset.editId = productId;
                        console.log('Submit button updated for edit mode');
                    }
                    
                    window.Utils.showNotification('Product data loaded for editing', 'info');
                }, 100);
                
            } else {
                window.Utils.showNotification('Product not found', 'error');
            }
        };
        
        window.deleteProduct = function(productId) {
            console.log('Deleting product:', productId);
            if (confirm('Are you sure you want to delete this product?')) {
                try {
                    // Use productManager directly instead of ProductOperations
                    const success = window.productManager.deleteProduct(productId);
                    console.log('Delete result:', success);
                    
                    if (success) {
                        window.Utils.showNotification('Product deleted successfully', 'success');
                        // Refresh products list
                        window.renderProducts();
                    } else {
                        window.Utils.showNotification('Failed to delete product', 'error');
                    }
                } catch (error) {
                    console.error('Delete error:', error);
                    window.Utils.showNotification('Error deleting product: ' + error.message, 'error');
                }
            }
        };
        
        window.viewProductDetails = function(productId) {
            console.log('Viewing product:', productId);
            const product = window.productManager.getProduct(productId);
            console.log('Found product for view:', product);
            
            if (product) {
                // Populate product details
                window.displayProductDetails(product);
                
                // Show product details section
                window.showProductDetails();
                
                window.Utils.showNotification('Product details displayed', 'info');
            } else {
                window.Utils.showNotification('Product not found', 'error');
            }
        };
        
        // Add renderProducts function
        window.renderProducts = function() {
            console.log('Rendering products...');
            
            // Get both containers
            const productsGrid = document.getElementById('productsGrid');
            const productsList = document.getElementById('productsList');
            const noProductsMessage = document.getElementById('noProductsMessage');
            
            console.log('Containers found:', { productsGrid, productsList, noProductsMessage });
            
            if (!productsGrid && !productsList) {
                console.error('Products containers not found');
                return;
            }
            
            // Use local productManager if available, otherwise use window.productManager
            const manager = productManager || window.productManager;
            if (!manager) {
                console.error('productManager not available');
                return;
            }
            
            const products = manager.getAllProducts();
            console.log('Products to render:', products);
            
            if (products.length === 0) {
                console.log('No products found, showing no products message');
                // Hide both containers and show no products message
                if (productsGrid) productsGrid.style.display = 'none';
                if (productsList) productsList.style.display = 'none';
                if (noProductsMessage) noProductsMessage.style.display = 'block';
                return;
            }
            
            console.log('Products found, rendering...');
            // Show containers and hide no products message
            if (noProductsMessage) noProductsMessage.style.display = 'none';
            
            // Render in grid view (default)
            if (productsGrid) {
                console.log('Rendering in grid view');
                // Use renderFilteredProducts for consistent rendering
                if (window.renderFilteredProducts) {
                    window.renderFilteredProducts(products);
                } else {
                    renderProductsInGrid(products, productsGrid);
                }
            }
            
            // Render in list view
            if (productsList) {
                console.log('Rendering in list view');
                renderProductsInList(products, productsList);
            }
            
            console.log('Products rendered successfully');
        };
        
        // Also define it in the global scope outside IIFE
        if (typeof window !== 'undefined') {
            window.renderProducts = window.renderProducts;
        }
        
        // Create product card element
        window.createProductCard = function(product) {
            console.log('createProductCard called with:', product);
            
            const card = document.createElement('div');
            card.className = 'product-card';
            card.innerHTML = `
                <div class="product-image">
                    <img src="${product.imageUrl || 'placeholder.svg'}" alt="${product.name}" class="product-img">
                </div>
                <div class="product-info">
                    <h3 class="product-name">${product.name}</h3>
                    <p class="product-description">${product.description}</p>
                    <div class="product-meta">
                        <span class="product-price">${window.Utils ? window.Utils.formatPrice(product.price) : product.price}</span>
                        <span class="product-category">${product.category}</span>
                    </div>
                    <div class="product-actions">
                        <button class="btn btn-info btn-sm" onclick="window.viewProductDetails('${product.id}')">
                            <i class="fas fa-eye"></i> show
                        </button>
                        <button class="btn btn-warning btn-sm" onclick="window.editProduct('${product.id}')">
                            <i class="fas fa-edit"></i> edit
                        </button>
                        <button class="btn btn-danger btn-sm" onclick="window.deleteProduct('${product.id}')">
                            <i class="fas fa-trash"></i> delete
                        </button>
                    </div>
                </div>
            `;
            
            console.log('Product card created:', card);
            return card;
        };
        
        // Render products in grid view
        function renderProductsInGrid(products, container) {
            console.log('renderProductsInGrid called with:', { products, container });
            
            // Clear existing cards (except sample card)
            const existingCards = container.querySelectorAll('.product-card:not(.sample-card)');
            console.log('Existing cards to remove:', existingCards.length);
            existingCards.forEach(card => card.remove());
            
            // Add product cards
            products.forEach((product, index) => {
                console.log(`Creating card for product ${index}:`, product);
                const card = window.createProductCard(product);
                container.appendChild(card);
            });
            
            console.log('Grid rendering completed');
        }
        
        // Render products in list view
        function renderProductsInList(products, container) {
            const productsHTML = products.map(product => `
                <div class="product-card" data-product-id="${product.id}">
                    <div class="product-image">
                        <img src="${product.imageUrl || 'placeholder.svg'}" alt="${product.name}" class="product-img">
                    </div>
                    <div class="product-info">
                        <h3 class="product-name">${product.name}</h3>
                        <p class="product-category">${product.category}</p>
                        <p class="product-price">${window.Utils ? window.Utils.formatPrice(product.price) : product.price}</p>
                        <p class="product-stock">Available: ${product.stock || 0}</p>
                        <div class="product-actions">
                            <button class="btn btn-info btn-sm" onclick="window.viewProductDetails('${product.id}')">
                                <i class="fas fa-eye"></i> show
                            </button>
                            <button class="btn btn-warning btn-sm" onclick="window.editProduct('${product.id}')">
                                <i class="fas fa-edit"></i> edit
                            </button>
                            <button class="btn btn-danger btn-sm" onclick="window.deleteProduct('${product.id}')">
                                <i class="fas fa-trash"></i> delete
                            </button>
                        </div>
                    </div>
                </div>
            `).join('');
            
            container.innerHTML = productsHTML;
        }
        
        // Add missing functions for tabs and other features
        window.switchTab = function(tabName) {
            // Hide all tab contents
            const tabContents = document.querySelectorAll('.tab-content');
            tabContents.forEach(content => content.classList.remove('active'));
            
            // Remove active class from all tab buttons
            const tabButtons = document.querySelectorAll('.tab-btn');
            tabButtons.forEach(btn => btn.classList.remove('active'));
            
            // Show selected tab content
            const selectedContent = document.getElementById(`${tabName}-tab`);
            if (selectedContent) selectedContent.classList.add('active');
            
            // Add active class to selected tab button
            const selectedButton = document.querySelector(`[data-tab="${tabName}"]`);
            if (selectedButton) selectedButton.classList.add('active');
        };
        
        window.changeView = function(viewType) {
            const gridView = document.getElementById('productsGrid');
            const listView = document.getElementById('productsList');
            const viewButtons = document.querySelectorAll('.view-btn');
            
            // Update button states
            viewButtons.forEach(btn => btn.classList.remove('active'));
            const activeBtn = document.querySelector(`[data-view="${viewType}"]`);
            if (activeBtn) activeBtn.classList.add('active');
            
            // Show/hide views
            if (viewType === 'grid') {
                if (gridView) gridView.style.display = 'grid';
                if (listView) listView.style.display = 'none';
            } else {
                if (gridView) gridView.style.display = 'none';
                if (listView) listView.style.display = 'block';
            }
        };
        
        // Add pagination functions
        window.nextPage = function() {
            // Implementation for next page
            console.log('Next page clicked');
        };
        
        window.previousPage = function() {
            // Implementation for previous page
            console.log('Previous page clicked');
        };
        
        // Add search and filter functions
        window.searchProducts = function(query) {
            console.log('Search query:', query);
            
            // Get all products
            const allProducts = window.productManager.getAllProducts();
            let filteredProducts = allProducts;
            
            // Apply search filter
            if (query && query.trim() !== '') {
                const searchTerm = query.toLowerCase().trim();
                filteredProducts = allProducts.filter(product =>
                    product.name.toLowerCase().includes(searchTerm) ||
                    product.description.toLowerCase().includes(searchTerm) ||
                    product.category.toLowerCase().includes(searchTerm)
                );
            }
            
            // Apply current category filter
            const categoryFilter = document.getElementById('categoryFilter');
            if (categoryFilter && categoryFilter.value) {
                filteredProducts = filteredProducts.filter(product => 
                    product.category === categoryFilter.value
                );
            }
            
            // Apply current sort
            const sortSelect = document.getElementById('sortProducts');
            if (sortSelect && sortSelect.value) {
                filteredProducts = window.sortProductsByType(filteredProducts, sortSelect.value);
            }
            
            // Render filtered products
            window.renderFilteredProducts(filteredProducts);
        };
        
        window.filterByCategory = function(category) {
            console.log('Category filter:', category);
            
            // Get all products
            const allProducts = window.productManager.getAllProducts();
            let filteredProducts = allProducts;
            
            // Apply category filter
            if (category && category !== '') {
                filteredProducts = allProducts.filter(product => 
                    product.category === category
                );
            }
            
            // Apply current search
            const searchInput = document.getElementById('searchProducts');
            if (searchInput && searchInput.value.trim() !== '') {
                const searchTerm = searchInput.value.toLowerCase().trim();
                filteredProducts = filteredProducts.filter(product =>
                    product.name.toLowerCase().includes(searchTerm) ||
                    product.description.toLowerCase().includes(searchTerm) ||
                    product.category.toLowerCase().includes(searchTerm)
                );
            }
            
            // Apply current sort
            const sortSelect = document.getElementById('sortProducts');
            if (sortSelect && sortSelect.value) {
                filteredProducts = window.sortProductsByType(filteredProducts, sortSelect.value);
            }
            
            // Render filtered products
            window.renderFilteredProducts(filteredProducts);
        };
        
        window.sortProducts = function(sortType) {
            console.log('Sort type:', sortType);
            
            // Get current filtered products
            let products = window.getCurrentFilteredProducts();
            
            // Apply sorting
            const sortedProducts = window.sortProductsByType(products, sortType);
            
            // Render sorted products
            window.renderFilteredProducts(sortedProducts);
        };
        
        // Helper function to sort products
        window.sortProductsByType = function(products, sortType) {
            const sortedProducts = [...products];
            
            switch (sortType) {
                case 'newest':
                    sortedProducts.sort((a, b) => new Date(b.createdAt) - new Date(a.createdAt));
                    break;
                case 'oldest':
                    sortedProducts.sort((a, b) => new Date(a.createdAt) - new Date(b.createdAt));
                    break;
                case 'price-low':
                    sortedProducts.sort((a, b) => a.price - b.price);
                    break;
                case 'price-high':
                    sortedProducts.sort((a, b) => b.price - a.price);
                    break;
                case 'name-az':
                    sortedProducts.sort((a, b) => a.name.localeCompare(b.name, 'en'));
                    break;
                case 'name-za':
                    sortedProducts.sort((a, b) => b.name.localeCompare(a.name, 'en'));
                    break;
                default:
                    // Default to newest
                    sortedProducts.sort((a, b) => new Date(b.createdAt) - new Date(a.createdAt));
            }
            
            return sortedProducts;
        };
        
        // Helper function to get current filtered products
        window.getCurrentFilteredProducts = function() {
            const allProducts = window.productManager.getAllProducts();
            let filteredProducts = allProducts;
            
            // Apply search filter
            const searchInput = document.getElementById('searchProducts');
            if (searchInput && searchInput.value.trim() !== '') {
                const searchTerm = searchInput.value.toLowerCase().trim();
                filteredProducts = filteredProducts.filter(product =>
                    product.name.toLowerCase().includes(searchTerm) ||
                    product.description.toLowerCase().includes(searchTerm) ||
                    product.category.toLowerCase().includes(searchTerm)
                );
            }
            
            // Apply category filter
            const categoryFilter = document.getElementById('categoryFilter');
            if (categoryFilter && categoryFilter.value) {
                filteredProducts = filteredProducts.filter(product => 
                    product.category === categoryFilter.value
                );
            }
            
            return filteredProducts;
        };
        
        // Function to clear all filters
        window.clearFilters = function() {
            // Clear search input
            const searchInput = document.getElementById('searchProducts');
            if (searchInput) searchInput.value = '';
            
            // Reset category filter
            const categoryFilter = document.getElementById('categoryFilter');
            if (categoryFilter) categoryFilter.value = '';
            
            // Reset sort
            const sortSelect = document.getElementById('sortProducts');
            if (sortSelect) sortSelect.value = 'newest';
            
            // Render all products
            const allProducts = window.productManager.getAllProducts();
            window.renderFilteredProducts(allProducts);
        };
        
        // Function to remove current image
        window.removeCurrentImage = function() {
            const currentImageContainer = document.getElementById('currentImageContainer');
            const imageUploadArea = document.getElementById('imageUploadArea');
            const imagePreview = document.getElementById('imagePreview');
            
            if (currentImageContainer) {
                currentImageContainer.remove();
            }
            
            // Show upload area
            if (imageUploadArea) {
                imageUploadArea.style.display = 'block';
            }
            
            // Clear current image URL
            if (imagePreview) {
                imagePreview.dataset.currentImageUrl = '';
            }
            
            window.Utils.showNotification('Current image removed. You can now upload a new one.', 'info');
        };
        
        // Function to reset form
        window.resetForm = function() {
            const form = document.getElementById('addProductForm');
            if (form) {
                form.reset();
                
                // Clear image preview
                const imagePreview = document.getElementById('imagePreview');
                if (imagePreview) {
                    imagePreview.innerHTML = '';
                    delete imagePreview.dataset.currentImageUrl;
                }
                
                // Show upload area
                const imageUploadArea = document.getElementById('imageUploadArea');
                if (imageUploadArea) {
                    imageUploadArea.style.display = 'block';
                }
                
                // Reset submit button
                const submitBtn = form.querySelector('button[type="submit"]');
                if (submitBtn) {
                    submitBtn.textContent = 'Save Product';
                    submitBtn.dataset.editMode = 'false';
                    delete submitBtn.dataset.editId;
                }
                
                window.Utils.showNotification('Form reset successfully', 'info');
            }
        };
        
        // Function to replace current image
        window.replaceCurrentImage = function() {
            const currentImageContainer = document.getElementById('currentImageContainer');
            const imageUploadArea = document.getElementById('imageUploadArea');
            
            // Hide current image
            if (currentImageContainer) {
                currentImageContainer.style.display = 'none';
            }
            
            // Show upload area
            if (imageUploadArea) {
                imageUploadArea.style.display = 'block';
            }
            
            window.Utils.showNotification('Upload area shown. Select a new image to replace the current one.', 'info');
        };
        
        // Function to render filtered products
        window.renderFilteredProducts = function(products) {
            const productsGrid = document.getElementById('productsGrid');
            const noProductsMessage = document.getElementById('noProductsMessage');
            
            if (!productsGrid) return;
            
            // Clear existing cards (except sample card)
            const existingCards = productsGrid.querySelectorAll('.product-card:not(.sample-card)');
            existingCards.forEach(card => card.remove());
            
            if (products.length === 0) {
                if (noProductsMessage) noProductsMessage.style.display = 'block';
                if (productsGrid) productsGrid.style.display = 'none';
            } else {
                if (noProductsMessage) noProductsMessage.style.display = 'none';
                if (productsGrid) productsGrid.style.display = 'grid';
                
                // Add product cards
                products.forEach(product => {
                    const card = window.createProductCard(product);
                    productsGrid.appendChild(card);
                });
            }
            
            // Update product count
            const productCount = document.getElementById('productCount');
            if (productCount) {
                productCount.textContent = products.length;
            }
        };
        
        // Make functions globally available
        window.ProductOperations = ProductOperations;
        window.EventHandlers = EventHandlers;
        window.Utils = Utils;
        window.productManager = productManager;
        window.stateManager = stateManager;
        window.switchTab = switchTab;
        window.changeView = changeView;
        window.nextPage = nextPage;
        window.previousPage = previousPage;
        window.searchProducts = searchProducts;
        window.filterByCategory = filterByCategory;
        window.sortProducts = sortProducts;
        
        // Ensure renderProducts is available globally
        if (typeof window.renderProducts === 'function') {
            console.log('window.renderProducts is already defined');
        } else {
            console.error('window.renderProducts is not defined!');
        }
        
        // Make sure all required functions are available
        window.createProductCard = window.createProductCard;
        window.displayProductDetails = window.displayProductDetails;
        window.editProduct = window.editProduct;
        window.deleteProduct = window.deleteProduct;
        window.viewProductDetails = window.viewProductDetails;
        window.showAddProductForm = window.showAddProductForm;
        window.zoomImage = window.zoomImage;
        
        // Force renderProducts to be available globally
        window.renderProducts = window.renderProducts;
                  
                })();