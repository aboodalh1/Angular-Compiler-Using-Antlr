package generators;

import nodes.ASTNode;
import nodes.product.ProductNode;
import nodes.product.ProductManagerNode;

/**
 * PHPGenerator generates PHP code for the product management application
 * Provides server-side functionality as an alternative to JavaScript
 */
public class PHPGenerator {
    private StringBuilder phpBuilder;
    private String indentation;
    private int indentLevel;

    public PHPGenerator() {
        this.phpBuilder = new StringBuilder();
        this.indentation = "    ";
        this.indentLevel = 0;
    }

    /**
     * Generate complete PHP application
     */
    public String generatePHP(ProductManagerNode productManager) {
        phpBuilder.setLength(0);
        indentLevel = 0;

        // PHP Configuration and Headers
        generatePHPHeaders();

        // Database Configuration
        generateDatabaseConfig();

        // Product Class
        generateProductClass();

        // Product Manager Class
        generateProductManagerClass();

        // Main Application Logic
        generateMainApplication();

        return phpBuilder.toString();
    }

    /**
     * Generate PHP Headers and Configuration
     */
    private void generatePHPHeaders() {
        addLine("<?php");
        addLine("// Product Management Application - Generated by Angular Compiler");
        addLine("// PHP Server-Side Implementation");
        addLine("");
        addLine("// Error reporting for development");
        addLine("error_reporting(E_ALL);");
        addLine("ini_set('display_errors', 1);");
        addLine("");
        addLine("// Set content type and character encoding");
        addLine("header('Content-Type: text/html; charset=UTF-8');");
        addLine("");
        addLine("// Start session");
        addLine("session_start();");
        addLine("");
    }

    /**
     * Generate Database Configuration
     */
    private void generateDatabaseConfig() {
        addLine("// Database Configuration");
        addLine("class DatabaseConfig {");
        indentLevel++;
        addLine("private $host = 'localhost';");
        addLine("private $dbname = 'product_management';");
        addLine("private $username = 'root';");
        addLine("private $password = '';");
        addLine("private $pdo;");
        addLine("");
        addLine("public function __construct() {");
        indentLevel++;
        addLine("try {");
        indentLevel++;
        addLine("$this->pdo = new PDO(");
        indentLevel++;
        addLine("'mysql:host=' . $this->host . ';dbname=' . $this->dbname . ';charset=utf8mb4',");
        addLine("$this->username,");
        addLine("$this->password");
        indentLevel--;
        addLine(");");
        addLine("$this->pdo->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);");
        indentLevel--;
        addLine("} catch (PDOException $e) {");
        indentLevel++;
        addLine("die('Database connection failed: ' . $e->getMessage());");
        indentLevel--;
        addLine("}");
        indentLevel--;
        addLine("}");
        addLine("");
        addLine("public function getConnection() {");
        indentLevel++;
        addLine("return $this->pdo;");
        indentLevel--;
        addLine("}");
        indentLevel--;
        addLine("}");
        addLine("");
        addLine("// Create database instance");
        addLine("$db = new DatabaseConfig();");
        addLine("$pdo = $db->getConnection();");
        addLine("");
    }

    /**
     * Generate Product Class
     */
    private void generateProductClass() {
        addLine("// Product Class");
        addLine("class Product {");
        indentLevel++;
        addLine("public $id;");
        addLine("public $name;");
        addLine("public $description;");
        addLine("public $price;");
        addLine("public $imageUrl;");
        addLine("public $category;");
        addLine("public $createdAt;");
        addLine("");
        addLine("public function __construct($data = []) {");
        indentLevel++;
        addLine("foreach ($data as $key => $value) {");
        indentLevel++;
        addLine("if (property_exists($this, $key)) {");
        indentLevel++;
        addLine("$this->$key = $value;");
        indentLevel--;
        addLine("}");
        indentLevel--;
        addLine("}");
        indentLevel--;
        addLine("}");
        indentLevel--;
        addLine("}");
        addLine("");
    }

    /**
     * Generate Product Manager Class
     */
    private void generateProductManagerClass() {
        addLine("// Product Manager Class");
        addLine("class ProductManager {");
        indentLevel++;
        addLine("private $pdo;");
        addLine("");
        addLine("public function __construct($pdo) {");
        indentLevel++;
        addLine("$this->pdo = $pdo;");
        indentLevel--;
        addLine("}");
        addLine("");
        addLine("// Add new product");
        addLine("public function addProduct($productData) {");
        indentLevel++;
        addLine("$sql = 'INSERT INTO products (name, description, price, imageUrl, category) VALUES (?, ?, ?, ?, ?)';");
        addLine("");
        addLine("try {");
        indentLevel++;
        addLine("$stmt = $this->pdo->prepare($sql);");
        addLine("$stmt->execute([");
        indentLevel++;
        addLine("$productData['name'],");
        addLine("$productData['description'],");
        addLine("$productData['price'],");
        addLine("$productData['imageUrl'] ?? 'placeholder.jpg',");
        addLine("$productData['category']");
        indentLevel--;
        addLine("]);");
        addLine("");
        addLine("$productData['id'] = $this->pdo->lastInsertId();");
        addLine("return new Product($productData);");
        indentLevel--;
        addLine("} catch (PDOException $e) {");
        indentLevel++;
        addLine("throw new Exception('فشل في إضافة المنتج');");
        indentLevel--;
        addLine("}");
        indentLevel--;
        addLine("}");
        addLine("");
        addLine("// Get all products");
        addLine("public function getAllProducts() {");
        indentLevel++;
        addLine("$sql = 'SELECT * FROM products ORDER BY createdAt DESC';");
        addLine("");
        addLine("try {");
        indentLevel++;
        addLine("$stmt = $this->pdo->query($sql);");
        addLine("$products = [];");
        addLine("");
        addLine("while ($data = $stmt->fetch(PDO::FETCH_ASSOC)) {");
        indentLevel++;
        addLine("$products[] = new Product($data);");
        indentLevel--;
        addLine("}");
        addLine("");
        addLine("return $products;");
        indentLevel--;
        addLine("} catch (PDOException $e) {");
        indentLevel++;
        addLine("throw new Exception('فشل في جلب المنتجات');");
        indentLevel--;
        addLine("}");
        indentLevel--;
        addLine("}");
        indentLevel--;
        addLine("}");
        addLine("");
        addLine("// Create product manager instance");
        addLine("$productManager = new ProductManager($pdo);");
        addLine("");
    }

    /**
     * Generate Main Application
     */
    private void generateMainApplication() {
        addLine("// Main Application Logic");
        addLine("function renderProducts() {");
        indentLevel++;
        addLine("global $productManager;");
        addLine("");
        addLine("try {");
        indentLevel++;
        addLine("$products = $productManager->getAllProducts();");
        addLine("");
        addLine("if (empty($products)) {");
        indentLevel++;
        addLine("echo '<div class=\"no-products-message\">لا توجد منتجات متاحة</div>';");
        indentLevel--;
        addLine("} else {");
        indentLevel++;
        addLine("echo '<div class=\"products-grid\">';");
        addLine("foreach ($products as $product) {");
        indentLevel++;
        addLine("echo generateProductCard($product);");
        indentLevel--;
        addLine("}");
        addLine("echo '</div>';");
        indentLevel--;
        addLine("}");
        indentLevel--;
        addLine("} catch (Exception $e) {");
        indentLevel++;
        addLine("echo '<div class=\"error-message\">خطأ في تحميل المنتجات</div>';");
        indentLevel--;
        addLine("}");
        indentLevel--;
        addLine("}");
        addLine("");
        addLine("function generateProductCard($product) {");
        indentLevel++;
        addLine("return '<div class=\"product-card\">' .");
        indentLevel++;
        addLine("'<h3>' . htmlspecialchars($product->name) . '</h3>' .");
        addLine("'<p>' . htmlspecialchars($product->description) . '</p>' .");
        addLine("'<span class=\"price\">' . number_format($product->price, 2) . '$</span>' .");
        addLine("'</div>';");
        indentLevel--;
        indentLevel--;
        addLine("}");
        addLine("");
        addLine("// Handle form submission");
        addLine("if ($_SERVER['REQUEST_METHOD'] === 'POST' && isset($_POST['name'])) {");
        indentLevel++;
        addLine("try {");
        indentLevel++;
        addLine("$productData = [");
        indentLevel++;
        addLine("'name' => $_POST['name'],");
        addLine("'description' => $_POST['description'],");
        addLine("'price' => floatval($_POST['price']),");
        addLine("'imageUrl' => $_POST['imageUrl'] ?? 'placeholder.jpg',");
        addLine("'category' => $_POST['category']");
        indentLevel--;
        addLine("];");
        addLine("");
        addLine("$product = $productManager->addProduct($productData);");
        addLine("echo '<div class=\"success-message\">تم إضافة المنتج بنجاح!</div>';");
        indentLevel--;
        addLine("} catch (Exception $e) {");
        indentLevel++;
        addLine("echo '<div class=\"error-message\">خطأ في إضافة المنتج</div>';");
        indentLevel--;
        addLine("}");
        indentLevel--;
        addLine("}");
        addLine("");
        addLine("?>");
    }

    /**
     * Add line with proper indentation
     */
    private void addLine(String line) {
        for (int i = 0; i < indentLevel; i++) {
            phpBuilder.append(indentation);
        }
        phpBuilder.append(line).append("\n");
    }

    /**
     * Reset generator for new generation
     */
    public void reset() {
        phpBuilder.setLength(0);
        indentLevel = 0;
    }

    /**
     * Get current PHP content
     */
    public String getCurrentPHP() {
        return phpBuilder.toString();
    }
}
