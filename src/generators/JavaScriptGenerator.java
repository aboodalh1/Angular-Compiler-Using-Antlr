package generators;

import nodes.ASTNode;
import nodes.product.ProductNode;
import nodes.product.ProductManagerNode;
import nodes.state.StateNode;
import nodes.state.ActionNode;
import nodes.crud.CRUDNode;
import java.util.List;

/**
 * JavaScriptGenerator generates JavaScript code for the product management
 * application
 * Provides modern ES6+ features with state management and CRUD operations
 */
public class JavaScriptGenerator {
    private StringBuilder jsBuilder;
    private String indentation;
    private int indentLevel;

    public JavaScriptGenerator() {
        this.jsBuilder = new StringBuilder();
        this.indentation = "  ";
        this.indentLevel = 0;
    }

    /**
     * Generate complete JavaScript code
     */
    public String generateJavaScript(ProductManagerNode productManager) {
        jsBuilder.setLength(0);
        indentLevel = 0;

        // JavaScript Module Structure
        generateModuleHeader();

        // State Management
        generateStateManagement();

        // Product Management Class
        generateProductManagerClass();

        // CRUD Operations
        generateCRUDOperations();

        // UI Event Handlers
        generateUIEventHandlers();

        // Utility Functions
        generateUtilityFunctions();

        // DOM Ready and Initialization
        generateInitialization();

        return jsBuilder.toString();
    }

    /**
     * Generate Module Header
     */
    private void generateModuleHeader() {
        addLine("// Product Management Application - Generated by Angular Compiler");
        addLine("// State Management and CRUD Operations");
        addLine("");
        addLine("(function() {");
        indentLevel++;
        addLine("'use strict';");
        addLine("");
    }

    /**
     * Generate State Management
     */
    private void generateStateManagement() {
        addLine("// State Management System");
        addLine("class StateManager {");
        indentLevel++;
        addLine("constructor() {");
        indentLevel++;
        addLine("this.state = {");
        indentLevel++;
        addLine("// Product State");
        addLine("products: [],");
        addLine("currentProduct: null,");
        addLine("selectedProductId: null,");
        addLine("productFilters: {");
        indentLevel++;
        addLine("search: '',");
        addLine("category: '',");
        addLine("sortBy: 'newest',");
        addLine("priceRange: { min: 0, max: Infinity }");
        indentLevel--;
        addLine("},");
        addLine("// UI State");
        addLine("ui: {");
        indentLevel++;
        addLine("currentView: 'grid',");
        addLine("currentPage: 1,");
        addLine("productsPerPage: 12,");
        addLine("isLoading: false,");
        addLine("activeTab: 'description',");
        addLine("showAddForm: false,");
        addLine("showEditForm: false");
        indentLevel--;
        addLine("},");
        addLine("// Navigation State");
        addLine("navigation: {");
        indentLevel++;
        addLine("currentSection: 'add-product',");
        addLine("history: [],");
        addLine("breadcrumbs: []");
        indentLevel--;
        addLine("},");
        addLine("// Cart & Wishlist State");
        addLine("cart: [],");
        addLine("wishlist: [],");
        addLine("// Notification State");
        addLine("notifications: []");
        indentLevel--;
        addLine("};");
        addLine("");
        addLine("this.subscribers = new Map();");
        addLine("this.stateId = 0;");
        indentLevel--;
        addLine("}");
        addLine("");
        addLine("// Subscribe to state changes");
        addLine("subscribe(key, callback) {");
        indentLevel++;
        addLine("if (!this.subscribers.has(key)) {");
        indentLevel++;
        addLine("this.subscribers.set(key, new Set());");
        indentLevel--;
        addLine("}");
        addLine("this.subscribers.get(key).add(callback);");
        addLine("return () => this.subscribers.get(key).delete(callback);");
        indentLevel--;
        addLine("}");
        addLine("");
        addLine("// Notify subscribers of state changes");
        addLine("notify(key, oldValue, newValue) {");
        indentLevel++;
        addLine("if (this.subscribers.has(key)) {");
        indentLevel++;
        addLine("this.subscribers.get(key).forEach(callback => {");
        indentLevel++;
        addLine("try {");
        indentLevel++;
        addLine("callback(oldValue, newValue, this.state);");
        indentLevel--;
        addLine("} catch (error) {");
        indentLevel++;
        addLine("console.error('Error in state subscriber:', error);");
        indentLevel--;
        addLine("}");
        indentLevel--;
        addLine("});");
        indentLevel--;
        addLine("}");
        indentLevel--;
        addLine("}");
        addLine("");
        addLine("// Update state with notification");
        addLine("setState(updates) {");
        indentLevel++;
        addLine("const oldState = { ...this.state };");
        addLine("");
        addLine("Object.keys(updates).forEach(key => {");
        indentLevel++;
        addLine("if (this.state.hasOwnProperty(key)) {");
        indentLevel++;
        addLine("const oldValue = this.state[key];");
        addLine("this.state[key] = { ...this.state[key], ...updates[key] };");
        addLine("this.notify(key, oldValue, this.state[key]);");
        indentLevel--;
        addLine("}");
        indentLevel--;
        addLine("}");
        addLine("");
        addLine("this.stateId++;");
        addLine("this.persistState();");
        indentLevel--;
        addLine("}");
        addLine("");
        addLine("// Get state value");
        addLine("getState(key) {");
        indentLevel++;
        addLine("return key ? this.state[key] : this.state;");
        indentLevel--;
        addLine("}");
        addLine("");
        addLine("// Product State Management");
        addLine("setProducts(products) {");
        indentLevel++;
        addLine("this.setState({ products });");
        indentLevel--;
        addLine("}");
        addLine("");
        addLine("addProduct(product) {");
        indentLevel++;
        addLine("const products = [...this.state.products, product];");
        addLine("this.setState({ products });");
        addLine("this.addNotification('تم إضافة المنتج بنجاح', 'success');");
        indentLevel--;
        addLine("}");
        addLine("");
        addLine("updateProduct(productId, updates) {");
        indentLevel++;
        addLine("const products = this.state.products.map(p =>");
        indentLevel++;
        addLine("p.id === productId ? { ...p, ...updates, updatedAt: new Date().toISOString() } : p");
        indentLevel--;
        addLine(");");
        addLine("this.setState({ products });");
        addLine("this.addNotification('تم تحديث المنتج بنجاح', 'success');");
        indentLevel--;
        addLine("}");
        addLine("");
        addLine("deleteProduct(productId) {");
        indentLevel++;
        addLine("const products = this.state.products.filter(p => p.id !== productId);");
        addLine("this.setState({ products });");
        addLine("this.addNotification('تم حذف المنتج بنجاح', 'success');");
        indentLevel--;
        addLine("}");
        addLine("");
        addLine("setCurrentProduct(product) {");
        indentLevel++;
        addLine("this.setState({ currentProduct: product, selectedProductId: product?.id });");
        indentLevel--;
        addLine("}");
        addLine("");
        addLine("// Filter State Management");
        addLine("setFilter(key, value) {");
        indentLevel++;
        addLine("const productFilters = { ...this.state.productFilters, [key]: value };");
        addLine("this.setState({ productFilters });");
        indentLevel--;
        addLine("}");
        addLine("");
        addLine("clearFilters() {");
        indentLevel++;
        addLine("this.setState({");
        indentLevel++;
        addLine("productFilters: {");
        indentLevel++;
        addLine("search: '',");
        addLine("category: '',");
        addLine("sortBy: 'newest',");
        addLine("priceRange: { min: 0, max: Infinity }");
        indentLevel--;
        addLine("}");
        indentLevel--;
        addLine("});");
        indentLevel--;
        addLine("}");
        addLine("");
        addLine("// UI State Management");
        addLine("setUIState(updates) {");
        indentLevel++;
        addLine("this.setState({ ui: { ...this.state.ui, ...updates } });");
        indentLevel--;
        addLine("}");
        addLine("");
        addLine("setCurrentView(view) {");
        indentLevel++;
        addLine("this.setUIState({ currentView: view });");
        indentLevel--;
        addLine("}");
        addLine("");
        addLine("setCurrentPage(page) {");
        indentLevel++;
        addLine("this.setUIState({ currentPage: page });");
        indentLevel--;
        addLine("}");
        addLine("");
        addLine("setActiveTab(tab) {");
        indentLevel++;
        addLine("this.setUIState({ activeTab: tab });");
        indentLevel--;
        addLine("}");
        addLine("");
        addLine("// Navigation State Management");
        addLine("navigateTo(section, data = {}) {");
        indentLevel++;
        addLine("const navigation = {");
        indentLevel++;
        addLine("currentSection: section,");
        addLine("history: [...this.state.navigation.history, this.state.navigation.currentSection],");
        addLine("breadcrumbs: this.generateBreadcrumbs(section, data)");
        indentLevel--;
        addLine("};");
        addLine("");
        addLine("this.setState({ navigation });");
        addLine("this.updateURL(section);");
        indentLevel--;
        addLine("}");
        addLine("");
        addLine("goBack() {");
        indentLevel++;
        addLine("if (this.state.navigation.history.length > 0) {");
        indentLevel++;
        addLine("const previousSection = this.state.navigation.history.pop();");
        addLine("const navigation = {");
        indentLevel++;
        addLine("currentSection: previousSection,");
        addLine("history: this.state.navigation.history,");
        addLine("breadcrumbs: this.generateBreadcrumbs(previousSection)");
        indentLevel--;
        addLine("};");
        addLine("");
        addLine("this.setState({ navigation });");
        addLine("this.updateURL(previousSection);");
        indentLevel--;
        addLine("}");
        indentLevel--;
        addLine("}");
        addLine("");
        addLine("generateBreadcrumbs(section, data = {}) {");
        indentLevel++;
        addLine("const breadcrumbs = [");
        indentLevel++;
        addLine("{ name: 'الرئيسية', section: 'add-product' }");
        indentLevel--;
        addLine("];");
        addLine("");
        addLine("switch (section) {");
        indentLevel++;
        addLine("case 'products':");
        indentLevel++;
        addLine("breadcrumbs.push({ name: 'المنتجات', section: 'products' });");
        indentLevel--;
        addLine("break;");
        addLine("case 'product-details':");
        indentLevel++;
        addLine("breadcrumbs.push({ name: 'المنتجات', section: 'products' });");
        addLine("if (data.productName) {");
        indentLevel++;
        addLine("breadcrumbs.push({ name: data.productName, section: 'product-details' });");
        indentLevel--;
        addLine("}");
        indentLevel--;
        addLine("break;");
        indentLevel--;
        addLine("}");
        addLine("");
        addLine("return breadcrumbs;");
        indentLevel--;
        addLine("}");
        addLine("");
        addLine("updateURL(section) {");
        indentLevel++;
        addLine("const url = new URL(window.location);");
        addLine("url.hash = section;");
        addLine("window.history.pushState({}, '', url);");
        indentLevel--;
        addLine("}");
        addLine("");
        addLine("// Cart State Management");
        addLine("addToCart(product, quantity = 1) {");
        indentLevel++;
        addLine("const existingItem = this.state.cart.find(item => item.id === product.id);");
        addLine("");
        addLine("if (existingItem) {");
        indentLevel++;
        addLine("existingItem.quantity += quantity;");
        addLine("this.setState({ cart: [...this.state.cart] });");
        indentLevel--;
        addLine("} else {");
        indentLevel++;
        addLine("const cart = [...this.state.cart, { ...product, quantity }];");
        addLine("this.setState({ cart });");
        indentLevel--;
        addLine("}");
        addLine("");
        addLine("this.addNotification(`تم إضافة ${product.name} إلى السلة`, 'success');");
        indentLevel--;
        addLine("}");
        addLine("");
        addLine("removeFromCart(productId) {");
        indentLevel++;
        addLine("const cart = this.state.cart.filter(item => item.id !== productId);");
        addLine("this.setState({ cart });");
        indentLevel--;
        addLine("}");
        addLine("");
        addLine("updateCartQuantity(productId, quantity) {");
        indentLevel++;
        addLine("if (quantity <= 0) {");
        indentLevel++;
        addLine("this.removeFromCart(productId);");
        indentLevel--;
        addLine("} else {");
        indentLevel++;
        addLine("const cart = this.state.cart.map(item =>");
        indentLevel++;
        addLine("item.id === productId ? { ...item, quantity } : item");
        indentLevel--;
        addLine(");");
        addLine("this.setState({ cart });");
        indentLevel--;
        addLine("}");
        indentLevel--;
        addLine("}");
        addLine("");
        addLine("// Wishlist State Management");
        addLine("addToWishlist(product) {");
        indentLevel++;
        addLine("if (!this.state.wishlist.find(item => item.id === product.id)) {");
        indentLevel++;
        addLine("const wishlist = [...this.state.wishlist, product];");
        addLine("this.setState({ wishlist });");
        addLine("this.addNotification(`تم إضافة ${product.name} إلى المفضلة`, 'success');");
        indentLevel--;
        addLine("}");
        indentLevel--;
        addLine("}");
        addLine("");
        addLine("removeFromWishlist(productId) {");
        indentLevel++;
        addLine("const wishlist = this.state.wishlist.filter(item => item.id !== productId);");
        addLine("this.setState({ wishlist });");
        indentLevel--;
        addLine("}");
        addLine("");
        addLine("// Notification State Management");
        addLine("addNotification(message, type = 'info', duration = 5000) {");
        indentLevel++;
        addLine("const notification = {");
        indentLevel++;
        addLine("id: Date.now(),");
        addLine("message,");
        addLine("type,");
        addLine("timestamp: new Date().toISOString()");
        indentLevel--;
        addLine("};");
        addLine("");
        addLine("const notifications = [...this.state.notifications, notification];");
        addLine("this.setState({ notifications });");
        addLine("");
        addLine("// Auto-remove notification after duration");
        addLine("setTimeout(() => {");
        indentLevel++;
        addLine("this.removeNotification(notification.id);");
        indentLevel--;
        addLine("}, duration);");
        indentLevel--;
        addLine("}");
        addLine("");
        addLine("removeNotification(id) {");
        indentLevel++;
        addLine("const notifications = this.state.notifications.filter(n => n.id !== id);");
        addLine("this.setState({ notifications });");
        indentLevel--;
        addLine("}");
        addLine("");
        addLine("// State Persistence");
        addLine("persistState() {");
        indentLevel++;
        addLine("try {");
        indentLevel++;
        addLine("const stateToPersist = {");
        indentLevel++;
        addLine("products: this.state.products,");
        addLine("cart: this.state.cart,");
        addLine("wishlist: this.state.wishlist,");
        addLine("productFilters: this.state.productFilters");
        indentLevel--;
        addLine("};");
        addLine("localStorage.setItem('productManagerState', JSON.stringify(stateToPersist));");
        indentLevel--;
        addLine("} catch (error) {");
        indentLevel++;
        addLine("console.error('Error persisting state:', error);");
        indentLevel--;
        addLine("}");
        indentLevel--;
        addLine("}");
        addLine("");
        addLine("loadPersistedState() {");
        indentLevel++;
        addLine("try {");
        indentLevel++;
        addLine("const persisted = localStorage.getItem('productManagerState');");
        addLine("if (persisted) {");
        indentLevel++;
        addLine("const parsed = JSON.parse(persisted);");
        addLine("this.setState({");
        indentLevel++;
        addLine("products: parsed.products || [],");
        addLine("cart: parsed.cart || [],");
        addLine("wishlist: parsed.wishlist || [],");
        addLine("productFilters: parsed.productFilters || this.state.productFilters");
        indentLevel--;
        addLine("});");
        indentLevel--;
        addLine("}");
        indentLevel--;
        addLine("} catch (error) {");
        indentLevel++;
        addLine("console.error('Error loading persisted state:', error);");
        indentLevel--;
        addLine("}");
        indentLevel--;
        addLine("}");
        addLine("");
        addLine("// Get computed state");
        addLine("getFilteredProducts() {");
        indentLevel++;
        addLine("let products = [...this.state.products];");
        addLine("");
        addLine("// Apply search filter");
        addLine("if (this.state.productFilters.search) {");
        indentLevel++;
        addLine("const searchTerm = this.state.productFilters.search.toLowerCase();");
        addLine("products = products.filter(product =>");
        indentLevel++;
        addLine("product.name.toLowerCase().includes(searchTerm) ||");
        addLine("product.description.toLowerCase().includes(searchTerm) ||");
        addLine("product.category.toLowerCase().includes(searchTerm)");
        indentLevel--;
        addLine(");");
        indentLevel--;
        addLine("}");
        addLine("");
        addLine("// Apply category filter");
        addLine("if (this.state.productFilters.category) {");
        indentLevel++;
        addLine("products = products.filter(product => product.category === this.state.productFilters.category);");
        addLine("}");
        addLine("");
        addLine("// Apply price filter");
        addLine("products = products.filter(product =>");
        indentLevel++;
        addLine("product.price >= this.state.productFilters.priceRange.min &&");
        addLine("product.price <= this.state.productFilters.priceRange.max");
        indentLevel--;
        addLine(");");
        addLine("");
        addLine("// Apply sorting");
        addLine("switch (this.state.productFilters.sortBy) {");
        indentLevel++;
        addLine("case 'newest':");
        indentLevel++;
        addLine("products.sort((a, b) => new Date(b.createdAt) - new Date(a.createdAt));");
        indentLevel--;
        addLine("break;");
        addLine("case 'oldest':");
        indentLevel++;
        addLine("products.sort((a, b) => new Date(a.createdAt) - new Date(b.createdAt));");
        indentLevel--;
        addLine("break;");
        addLine("case 'price-low':");
        indentLevel++;
        addLine("products.sort((a, b) => a.price - b.price);");
        indentLevel--;
        addLine("break;");
        addLine("case 'price-high':");
        indentLevel++;
        addLine("products.sort((a, b) => b.price - a.price);");
        indentLevel--;
        addLine("break;");
        addLine("case 'name-az':");
        indentLevel++;
        addLine("products.sort((a, b) => a.name.localeCompare(b.name, 'ar'));");
        indentLevel--;
        addLine("break;");
        addLine("case 'name-za':");
        indentLevel++;
        addLine("products.sort((a, b) => b.name.localeCompare(a.name, 'ar'));");
        indentLevel--;
        addLine("break;");
        indentLevel--;
        addLine("}");
        addLine("");
        addLine("return products;");
        indentLevel--;
        addLine("}");
        addLine("");
        addLine("getPaginatedProducts() {");
        indentLevel++;
        addLine("const filtered = this.getFilteredProducts();");
        addLine("const startIndex = (this.state.ui.currentPage - 1) * this.state.ui.productsPerPage;");
        addLine("const endIndex = startIndex + this.state.ui.productsPerPage;");
        addLine("return filtered.slice(startIndex, endIndex);");
        indentLevel--;
        addLine("}");
        addLine("");
        addLine("getCartTotal() {");
        indentLevel++;
        addLine("return this.state.cart.reduce((total, item) => total + (item.price * item.quantity), 0);");
        indentLevel--;
        addLine("}");
        addLine("");
        addLine("getCartItemCount() {");
        indentLevel++;
        addLine("return this.state.cart.reduce((count, item) => count + item.quantity, 0);");
        indentLevel--;
        addLine("}");
        indentLevel--;
        addLine("}");
        addLine("");
        addLine("// Create global state manager instance");
        addLine("const stateManager = new StateManager();");
        addLine("");
    }

    /**
     * Generate Product Manager Class
     */
    private void generateProductManagerClass() {
        addLine("// Product Manager Class");
        addLine("class ProductManager {");
        indentLevel++;
        addLine("constructor() {");
        indentLevel++;
        addLine("this.products = [];");
        addLine("this.currentProduct = null;");
        addLine("this.nextId = 1;");
        indentLevel--;
        addLine("}");
        addLine("");
        addLine("// Add new product");
        addLine("addProduct(productData) {");
        indentLevel++;
        addLine("const product = {");
        indentLevel++;
        addLine("id: this.generateId(),");
        addLine("...productData,");
        addLine("createdAt: new Date().toISOString(),");
        addLine("updatedAt: new Date().toISOString()");
        indentLevel--;
        addLine("};");
        addLine("");
        addLine("this.products.push(product);");
        addLine("stateManager.setState({ products: [...this.products] });");
        addLine("this.saveToLocalStorage();");
        addLine("return product;");
        indentLevel--;
        addLine("}");
        addLine("");
        addLine("// Get product by ID");
        addLine("getProduct(id) {");
        indentLevel++;
        addLine("return this.products.find(p => p.id === id);");
        indentLevel--;
        addLine("}");
        addLine("");
        addLine("// Update product");
        addLine("updateProduct(id, updates) {");
        indentLevel++;
        addLine("const index = this.products.findIndex(p => p.id === id);");
        addLine("if (index !== -1) {");
        indentLevel++;
        addLine("this.products[index] = {");
        indentLevel++;
        addLine("...this.products[index],");
        addLine("...updates,");
        addLine("updatedAt: new Date().toISOString()");
        indentLevel--;
        addLine("};");
        addLine("stateManager.setState({ products: [...this.products] });");
        addLine("this.saveToLocalStorage();");
        addLine("return this.products[index];");
        indentLevel--;
        addLine("}");
        addLine("return null;");
        indentLevel--;
        addLine("}");
        addLine("");
        addLine("// Delete product");
        addLine("deleteProduct(id) {");
        indentLevel++;
        addLine("const index = this.products.findIndex(p => p.id === id);");
        addLine("if (index !== -1) {");
        indentLevel++;
        addLine("this.products.splice(index, 1);");
        addLine("stateManager.setState({ products: [...this.products] });");
        addLine("this.saveToLocalStorage();");
        addLine("return true;");
        indentLevel--;
        addLine("}");
        addLine("return false;");
        indentLevel--;
        addLine("}");
        addLine("");
        addLine("// Get all products");
        addLine("getAllProducts() {");
        indentLevel++;
        addLine("return [...this.products];");
        indentLevel--;
        addLine("}");
        addLine("");
        addLine("// Get products by category");
        addLine("getProductsByCategory(category) {");
        indentLevel++;
        addLine("return this.products.filter(p => p.category === category);");
        indentLevel--;
        addLine("}");
        addLine("");
        addLine("// Search products");
        addLine("searchProducts(query) {");
        indentLevel++;
        addLine("const lowerQuery = query.toLowerCase();");
        addLine("return this.products.filter(p =>");
        indentLevel++;
        addLine("p.name.toLowerCase().includes(lowerQuery) ||");
        addLine("p.description.toLowerCase().includes(lowerQuery) ||");
        addLine("p.category.toLowerCase().includes(lowerQuery)");
        indentLevel--;
        addLine(");");
        indentLevel--;
        addLine("}");
        addLine("");
        addLine("// Generate unique ID");
        addLine("generateId() {");
        indentLevel++;
        addLine("return this.nextId++;");
        indentLevel--;
        addLine("}");
        addLine("");
        addLine("// Save to localStorage");
        addLine("saveToLocalStorage() {");
        indentLevel++;
        addLine("try {");
        indentLevel++;
        addLine("localStorage.setItem('products', JSON.stringify(this.products));");
        addLine("localStorage.setItem('nextId', this.nextId.toString());");
        indentLevel--;
        addLine("} catch (error) {");
        indentLevel++;
        addLine("console.error('Error saving to localStorage:', error);");
        indentLevel--;
        addLine("}");
        indentLevel--;
        addLine("}");
        addLine("");
        addLine("// Load from localStorage");
        addLine("loadFromLocalStorage() {");
        indentLevel++;
        addLine("try {");
        indentLevel++;
        addLine("const savedProducts = localStorage.getItem('products');");
        addLine("const savedNextId = localStorage.getItem('nextId');");
        addLine("");
        addLine("if (savedProducts) {");
        indentLevel++;
        addLine("this.products = JSON.parse(savedProducts);");
        indentLevel--;
        addLine("}");
        addLine("");
        addLine("if (savedNextId) {");
        indentLevel++;
        addLine("this.nextId = parseInt(savedNextId);");
        indentLevel--;
        addLine("}");
        indentLevel--;
        addLine("} catch (error) {");
        indentLevel++;
        addLine("console.error('Error loading from localStorage:', error);");
        indentLevel--;
        addLine("}");
        indentLevel--;
        addLine("}");
        indentLevel--;
        addLine("}");
        addLine("");
        addLine("// Create global product manager instance");
        addLine("const productManager = new ProductManager();");
        addLine("");
    }

    /**
     * Generate CRUD Operations
     */
    private void generateCRUDOperations() {
        addLine("// CRUD Operations");
        addLine("const ProductOperations = {");
        indentLevel++;
        addLine("// Create - Add new product");
        addLine("create: (productData) => {");
        indentLevel++;
        addLine("stateManager.setState({ loading: true, error: null });");
        addLine("");
        addLine("try {");
        indentLevel++;
        addLine("const product = productManager.addProduct(productData);");
        addLine("stateManager.setState({ loading: false });");
        addLine("showNotification('تم إضافة المنتج بنجاح', 'success');");
        addLine("return product;");
        indentLevel--;
        addLine("} catch (error) {");
        indentLevel++;
        addLine("stateManager.setState({ loading: false, error: error.message });");
        addLine("showNotification('خطأ في إضافة المنتج', 'error');");
        addLine("throw error;");
        indentLevel--;
        addLine("}");
        indentLevel--;
        addLine("},");
        addLine("");
        addLine("// Read - Get products");
        addLine("read: (id = null) => {");
        indentLevel++;
        addLine("if (id) {");
        indentLevel++;
        addLine("return productManager.getProduct(id);");
        indentLevel--;
        addLine("}");
        addLine("return productManager.getAllProducts();");
        indentLevel--;
        addLine("},");
        addLine("");
        addLine("// Update - Modify product");
        addLine("update: (id, updates) => {");
        indentLevel++;
        addLine("stateManager.setState({ loading: true, error: null });");
        addLine("");
        addLine("try {");
        indentLevel++;
        addLine("const product = productManager.updateProduct(id, updates);");
        addLine("if (product) {");
        indentLevel++;
        addLine("stateManager.setState({ loading: false });");
        addLine("showNotification('تم تحديث المنتج بنجاح', 'success');");
        addLine("return product;");
        indentLevel--;
        addLine("} else {");
        indentLevel++;
        addLine("throw new Error('المنتج غير موجود');");
        indentLevel--;
        addLine("}");
        indentLevel--;
        addLine("} catch (error) {");
        indentLevel++;
        addLine("stateManager.setState({ loading: false, error: error.message });");
        addLine("showNotification('خطأ في تحديث المنتج', 'error');");
        addLine("throw error;");
        indentLevel--;
        addLine("}");
        indentLevel--;
        addLine("},");
        addLine("");
        addLine("// Delete - Remove product");
        addLine("delete: (id) => {");
        indentLevel++;
        addLine("stateManager.setState({ loading: true, error: null });");
        addLine("");
        addLine("try {");
        indentLevel++;
        addLine("const success = productManager.deleteProduct(id);");
        addLine("if (success) {");
        indentLevel++;
        addLine("stateManager.setState({ loading: false });");
        addLine("showNotification('تم حذف المنتج بنجاح', 'success');");
        addLine("return true;");
        indentLevel--;
        addLine("} else {");
        indentLevel++;
        addLine("throw new Error('المنتج غير موجود');");
        indentLevel--;
        addLine("}");
        indentLevel--;
        addLine("} catch (error) {");
        indentLevel++;
        addLine("stateManager.setState({ loading: false, error: error.message });");
        addLine("showNotification('خطأ في حذف المنتج', 'error');");
        indentLevel--;
        addLine("}");
        indentLevel--;
        addLine("}");
        indentLevel--;
        addLine("};");
        addLine("");
    }

    /**
     * Generate UI Event Handlers
     */
    private void generateUIEventHandlers() {
        addLine("// UI Event Handlers");
        addLine("const EventHandlers = {");
        indentLevel++;
        addLine("// Handle form submission");
        addLine("handleAddProduct: (event) => {");
        indentLevel++;
        addLine("event.preventDefault();");
        addLine("");
        addLine("const formData = new FormData(event.target);");
        addLine("const productData = {");
        indentLevel++;
        addLine("name: formData.get('productName'),");
        addLine("description: formData.get('productDescription'),");
        addLine("price: parseFloat(formData.get('productPrice')),");
        addLine("category: formData.get('productCategory'),");
        addLine("imageUrl: formData.get('productImage') || 'placeholder.jpg'");
        indentLevel--;
        addLine("};");
        addLine("");
        addLine("try {");
        indentLevel++;
        addLine("ProductOperations.create(productData);");
        addLine("event.target.reset();");
        addLine("scrollToSection('products');");
        indentLevel--;
        addLine("} catch (error) {");
        indentLevel++;
        addLine("console.error('Error adding product:', error);");
        indentLevel--;
        addLine("}");
        indentLevel--;
        addLine("},");
        addLine("");
        addLine("// Handle product deletion");
        addLine("handleDeleteProduct: (id) => {");
        indentLevel++;
        addLine("if (confirm('هل أنت متأكد من حذف هذا المنتج؟')) {");
        indentLevel++;
        addLine("try {");
        indentLevel++;
        addLine("ProductOperations.delete(id);");
        indentLevel--;
        addLine("} catch (error) {");
        indentLevel++;
        addLine("console.error('Error deleting product:', error);");
        indentLevel--;
        addLine("}");
        indentLevel--;
        addLine("}");
        indentLevel--;
        addLine("},");
        addLine("");
        addLine("// Handle product editing");
        addLine("handleEditProduct: (id) => {");
        indentLevel++;
        addLine("const product = productManager.getProduct(id);");
        addLine("if (product) {");
        indentLevel++;
        addLine("// Populate form with product data");
        addLine("document.getElementById('productName').value = product.name;");
        addLine("document.getElementById('productDescription').value = product.description;");
        addLine("document.getElementById('productPrice').value = product.price;");
        addLine("document.getElementById('productCategory').value = product.category;");
        addLine("document.getElementById('productImage').value = product.imageUrl;");
        addLine("");
        addLine("// Change form to edit mode");
        addLine("const form = document.getElementById('addProductForm');");
        addLine("form.dataset.editMode = 'true';");
        addLine("form.dataset.editId = id;");
        addLine("");
        addLine("// Update submit button");
        addLine("const submitBtn = form.querySelector('button[type=\"submit\"]');");
        addLine("submitBtn.innerHTML = '<i class=\"fas fa-save\"></i> تحديث المنتج';");
        addLine("");
        addLine("scrollToSection('add-product');");
        indentLevel--;
        addLine("}");
        indentLevel--;
        addLine("},");
        addLine("");
        addLine("// Handle product view");
        addLine("handleViewProduct: (id) => {");
        indentLevel++;
        addLine("const product = productManager.getProduct(id);");
        addLine("if (product) {");
        indentLevel++;
        addLine("displayProductDetails(product);");
        addLine("scrollToSection('product-details');");
        indentLevel--;
        addLine("}");
        indentLevel--;
        addLine("}");
        indentLevel--;
        addLine("};");
        addLine("");
    }

    /**
     * Generate Utility Functions
     */
    private void generateUtilityFunctions() {
        addLine("// Utility Functions");
        addLine("const Utils = {");
        indentLevel++;
        addLine("// Scroll to section");
        addLine("scrollToSection: (sectionId) => {");
        indentLevel++;
        addLine("const section = document.getElementById(sectionId);");
        addLine("if (section) {");
        indentLevel++;
        addLine("section.scrollIntoView({ behavior: 'smooth' });");
        indentLevel--;
        addLine("}");
        indentLevel--;
        addLine("},");
        addLine("");
        addLine("// Show notification");
        addLine("showNotification: (message, type = 'info') => {");
        indentLevel++;
        addLine("const notification = document.createElement('div');");
        addLine("notification.className = `notification notification-${type}`;");
        addLine("notification.textContent = message;");
        addLine("");
        addLine("document.body.appendChild(notification);");
        addLine("");
        addLine("// Auto remove after 3 seconds");
        addLine("setTimeout(() => {");
        indentLevel++;
        addLine("notification.remove();");
        indentLevel--;
        addLine("}, 3000);");
        indentLevel--;
        addLine("},");
        addLine("");
        addLine("// Format price");
        addLine("formatPrice: (price) => {");
        indentLevel++;
        addLine("return new Intl.NumberFormat('ar-SA', {");
        indentLevel++;
        addLine("style: 'currency',");
        addLine("currency: 'SAR'");
        indentLevel--;
        addLine("}).format(price);");
        indentLevel--;
        addLine("},");
        addLine("");
        addLine("// Format date");
        addLine("formatDate: (dateString) => {");
        indentLevel++;
        addLine("return new Date(dateString).toLocaleDateString('ar-SA');");
        indentLevel--;
        addLine("}");
        indentLevel--;
        addLine("};");
        addLine("");
    }

    /**
     * Generate Initialization
     */
    private void generateInitialization() {
        addLine("// Initialize application when DOM is ready");
        addLine("document.addEventListener('DOMContentLoaded', () => {");
        indentLevel++;
        addLine("// Load saved products");
        addLine("productManager.loadFromLocalStorage();");
        addLine("");
        addLine("// Set up event listeners");
        addLine("setupEventListeners();");
        addLine("");
        addLine("// Initial render");
        addLine("renderProducts();");
        addLine("");
        addLine("// Subscribe to state changes");
        addLine("stateManager.subscribe((state) => {");
        indentLevel++;
        addLine("renderProducts();");
        indentLevel--;
        addLine("});");
        indentLevel--;
        addLine("});");
        addLine("");
        addLine("// Setup event listeners");
        addLine("function setupEventListeners() {");
        indentLevel++;
        addLine("// Add product form");
        addLine("const addProductForm = document.getElementById('addProductForm');");
        addLine("if (addProductForm) {");
        indentLevel++;
        addLine("addProductForm.addEventListener('submit', EventHandlers.handleAddProduct);");
        indentLevel--;
        addLine("}");
        addLine("");
        addLine("// Navigation links");
        addLine("document.querySelectorAll('.nav-link').forEach(link => {");
        indentLevel++;
        addLine("link.addEventListener('click', (e) => {");
        indentLevel++;
        addLine("e.preventDefault();");
        addLine("const targetId = link.getAttribute('href').substring(1);");
        addLine("Utils.scrollToSection(targetId);");
        indentLevel--;
        addLine("});");
        indentLevel--;
        addLine("});");
        indentLevel--;
        addLine("}");
        addLine("");
        addLine("// Render products in the grid");
        addLine("function renderProducts() {");
        indentLevel++;
        addLine("const productsGrid = document.getElementById('productsGrid');");
        addLine("const noProductsMessage = document.getElementById('noProductsMessage');");
        addLine("const products = productManager.getAllProducts();");
        addLine("");
        addLine("if (products.length === 0) {");
        indentLevel++;
        addLine("if (productsGrid) productsGrid.style.display = 'none';");
        addLine("if (noProductsMessage) noProductsMessage.style.display = 'block';");
        indentLevel--;
        addLine("} else {");
        indentLevel++;
        addLine("if (productsGrid) productsGrid.style.display = 'grid';");
        addLine("if (noProductsMessage) noProductsMessage.style.display = 'none';");
        addLine("");
        addLine("renderProductCards(products);");
        indentLevel--;
        addLine("}");
        indentLevel--;
        addLine("}");
        addLine("");
        addLine("// Render product cards");
        addLine("function renderProductCards(products) {");
        indentLevel++;
        addLine("const productsGrid = document.getElementById('productsGrid');");
        addLine("if (!productsGrid) return;");
        addLine("");
        addLine("// Clear existing cards (except sample card)");
        addLine("const existingCards = productsGrid.querySelectorAll('.product-card:not(.sample-card)');");
        addLine("existingCards.forEach(card => card.remove());");
        addLine("");
        addLine("// Add product cards");
        addLine("products.forEach(product => {");
        indentLevel++;
        addLine("const card = createProductCard(product);");
        addLine("productsGrid.appendChild(card);");
        indentLevel--;
        addLine("});");
        indentLevel--;
        addLine("}");
        addLine("");
        addLine("// Create product card element");
        addLine("function createProductCard(product) {");
        indentLevel++;
        addLine("const card = document.createElement('div');");
        addLine("card.className = 'product-card';");
        addLine("card.innerHTML = `");
        indentLevel++;
        addLine("<div class=\"product-image\">");
        addLine("<img src=\"${product.imageUrl || 'placeholder.jpg'}\" alt=\"${product.name}\" class=\"product-img\">");
        addLine("</div>");
        addLine("<div class=\"product-info\">");
        addLine("<h3 class=\"product-name\">${product.name}</h3>");
        addLine("<p class=\"product-description\">${product.description}</p>");
        addLine("<div class=\"product-meta\">");
        addLine("<span class=\"product-price\">${Utils.formatPrice(product.price)}</span>");
        addLine("<span class=\"product-category\">${product.category}</span>");
        addLine("</div>");
        addLine("<div class=\"product-actions\">");
        addLine("<button class=\"btn btn-info btn-sm\" onclick=\"EventHandlers.handleViewProduct('${product.id}')\">");
        addLine("<i class=\"fas fa-eye\"></i> show");
        addLine("</button>");
        addLine("<button class=\"btn btn-warning btn-sm\" onclick=\"EventHandlers.handleEditProduct('${product.id}')\">");
        addLine("<i class=\"fas fa-edit\"></i> edit");
        addLine("</button>");
        addLine("<button class=\"btn btn-danger btn-sm\" onclick=\"EventHandlers.handleDeleteProduct('${product.id}')\">");
        addLine("<i class=\"fas fa-trash\"></i> delete");
        addLine("</button>");
        addLine("</div>");
        addLine("</div>");
        addLine("`;");
        addLine("");
        addLine("return card;");
        indentLevel--;
        addLine("}");
        addLine("");
        addLine("// Display product details");
        addLine("function displayProductDetails(product) {");
        indentLevel++;
        addLine("const detailsContent = document.getElementById('productDetailsContent');");
        addLine("if (!detailsContent) return;");
        addLine("");
        addLine("// Hide placeholder and show template");
        addLine("const placeholder = detailsContent.querySelector('.product-details-placeholder');");
        addLine("const template = detailsContent.querySelector('.product-details-template');");
        addLine("if (placeholder) placeholder.style.display = 'none';");
        addLine("if (template) template.style.display = 'block';");
        addLine("");
        addLine("// Populate product details");
        addLine("populateProductDetails(product);");
        indentLevel--;
        addLine("}");
        addLine("");
        addLine("// Populate product details in template");
        addLine("function populateProductDetails(product) {");
        indentLevel++;
        addLine("// Basic info");
        addLine("const title = document.getElementById('productDetailTitle');");
        addLine("const breadcrumbName = document.getElementById('productBreadcrumbName');");
        addLine("const category = document.getElementById('productDetailCategory');");
        addLine("const brand = document.getElementById('productDetailBrand');");
        addLine("const model = document.getElementById('productDetailModel');");
        addLine("const price = document.getElementById('productDetailPrice');");
        addLine("const stock = document.getElementById('productDetailStock');");
        addLine("const description = document.getElementById('productDetailDescription');");
        addLine("");
        addLine("if (title) title.textContent = product.name;");
        addLine("if (breadcrumbName) breadcrumbName.textContent = product.name;");
        addLine("if (category) category.textContent = product.category || 'غير محدد';");
        addLine("if (brand) brand.textContent = product.brand || 'غير محدد';");
        addLine("if (model) model.textContent = product.model || 'غير محدد';");
        addLine("if (price) price.textContent = Utils.formatPrice(product.price);");
        addLine("if (stock) {");
        indentLevel++;
        addLine("stock.textContent = product.inStock ? 'متوفر' : 'غير متوفر';");
        addLine("stock.className = product.inStock ? 'availability-status' : 'availability-status out-of-stock';");
        indentLevel--;
        addLine("}");
        addLine("if (description) description.textContent = product.description || 'لا يوجد وصف';");
        addLine("");
        addLine("// Images");
        addLine("const mainImage = document.getElementById('productMainImage');");
        addLine("const thumbnailContainer = document.getElementById('thumbnailImages');");
        addLine("");
        addLine("if (mainImage) {");
        indentLevel++;
        addLine("mainImage.src = product.imageUrl || 'placeholder.jpg';");
        addLine("mainImage.alt = product.name;");
        indentLevel--;
        addLine("}");
        addLine("");
        addLine("if (thumbnailContainer) {");
        indentLevel++;
        addLine("thumbnailContainer.innerHTML = '';");
        addLine("if (product.imageUrl) {");
        indentLevel++;
        addLine("const thumbnail = document.createElement('img');");
        addLine("thumbnail.src = product.imageUrl;");
        addLine("thumbnail.alt = product.name;");
        addLine("thumbnail.className = 'thumbnail-img active';");
        addLine("thumbnail.onclick = () => setMainImage(product.imageUrl);");
        addLine("thumbnailContainer.appendChild(thumbnail);");
        indentLevel--;
        addLine("}");
        indentLevel--;
        addLine("}");
        addLine("");
        addLine("// Features");
        addLine("populateProductFeatures(product.features || []);");
        addLine("");
        addLine("// Specifications");
        addLine("populateProductSpecifications(product);");
        addLine("");
        addLine("// Reviews");
        addLine("populateProductReviews(product.reviews || []);");
        addLine("");
        addLine("// Related products");
        addLine("populateRelatedProducts(product.category);");
        indentLevel--;
        addLine("}");
        addLine("");
        addLine("// Set main image from thumbnail");
        addLine("function setMainImage(imageUrl) {");
        indentLevel++;
        addLine("const mainImage = document.getElementById('productMainImage');");
        addLine("if (mainImage) mainImage.src = imageUrl;");
        addLine("");
        addLine("// Update active thumbnail");
        addLine("const thumbnails = document.querySelectorAll('.thumbnail-img');");
        addLine("thumbnails.forEach(thumb => thumb.classList.remove('active'));");
        addLine("event.target.classList.add('active');");
        indentLevel--;
        addLine("}");
        addLine("");
        addLine("// Populate product features");
        addLine("function populateProductFeatures(features) {");
        indentLevel++;
        addLine("const featuresList = document.getElementById('featuresList');");
        addLine("if (!featuresList) return;");
        addLine("");
        addLine("featuresList.innerHTML = '';");
        addLine("if (features.length === 0) {");
        indentLevel++;
        addLine("featuresList.innerHTML = '<li>لا توجد مميزات محددة</li>';");
        indentLevel--;
        addLine("} else {");
        indentLevel++;
        addLine("features.forEach(feature => {");
        indentLevel++;
        addLine("const li = document.createElement('li');");
        addLine("li.textContent = feature;");
        addLine("featuresList.appendChild(li);");
        indentLevel--;
        addLine("});");
        indentLevel--;
        addLine("}");
        indentLevel--;
        addLine("}");
        addLine("");
        addLine("// Populate product specifications");
        addLine("function populateProductSpecifications(product) {");
        indentLevel++;
        addLine("const specsGrid = document.getElementById('specsGrid');");
        addLine("if (!specsGrid) return;");
        addLine("");
        addLine("specsGrid.innerHTML = '';");
        addLine("");
        addLine("const specs = [");
        indentLevel++;
        addLine("{ label: 'الاسم', value: product.name },");
        addLine("{ label: 'الفئة', value: product.category || 'غير محدد' },");
        addLine("{ label: 'العلامة التجارية', value: product.brand || 'غير محدد' },");
        addLine("{ label: 'الموديل', value: product.model || 'غير محدد' },");
        addLine("{ label: 'الوزن', value: product.weight ? `${product.weight} كجم` : 'غير محدد' },");
        addLine("{ label: 'الأبعاد', value: product.dimensions || 'غير محدد' },");
        addLine("{ label: 'السعر', value: Utils.formatPrice(product.price) },");
        addLine("{ label: 'التوفر', value: product.inStock ? 'متوفر' : 'غير متوفر' },");
        addLine("{ label: 'تاريخ الإنشاء', value: Utils.formatDate(product.createdAt) },");
        addLine("{ label: 'آخر تحديث', value: Utils.formatDate(product.updatedAt) }");
        indentLevel--;
        addLine("];");
        addLine("");
        addLine("specs.forEach(spec => {");
        indentLevel++;
        addLine("const specItem = document.createElement('div');");
        addLine("specItem.className = 'spec-item';");
        addLine("specItem.innerHTML = `");
        indentLevel++;
        addLine("<span class=\"spec-label\">${spec.label}:</span>");
        addLine("<span class=\"spec-value\">${spec.value}</span>");
        indentLevel--;
        addLine("`;");
        addLine("specsGrid.appendChild(specItem);");
        indentLevel--;
        addLine("});");
        indentLevel--;
        addLine("}");
        addLine("");
        addLine("// Populate product reviews");
        addLine("function populateProductReviews(reviews) {");
        indentLevel++;
        addLine("const averageRating = document.getElementById('averageRating');");
        addLine("const ratingStars = document.getElementById('ratingStars');");
        addLine("const totalReviews = document.getElementById('totalReviews');");
        addLine("const reviewsList = document.getElementById('reviewsList');");
        addLine("");
        addLine("if (averageRating) {");
        indentLevel++;
        addLine("const avgRating = reviews.length > 0 ? (reviews.reduce((sum, r) => sum + r.rating, 0) / reviews.length).toFixed(1) : '0.0';");
        addLine("averageRating.textContent = avgRating;");
        indentLevel--;
        addLine("}");
        addLine("");
        addLine("if (ratingStars) {");
        indentLevel++;
        addLine("const stars = '★'.repeat(Math.floor(avgRating)) + '☆'.repeat(5 - Math.floor(avgRating));");
        addLine("ratingStars.textContent = stars;");
        indentLevel--;
        addLine("}");
        addLine("");
        addLine("if (totalReviews) {");
        indentLevel++;
        addLine("totalReviews.textContent = `${reviews.length} تقييم`;");
        indentLevel--;
        addLine("}");
        addLine("");
        addLine("if (reviewsList) {");
        indentLevel++;
        addLine("reviewsList.innerHTML = '';");
        addLine("if (reviews.length === 0) {");
        indentLevel++;
        addLine("reviewsList.innerHTML = '<p>لا توجد تقييمات بعد</p>';");
        indentLevel--;
        addLine("} else {");
        indentLevel++;
        addLine("reviews.forEach(review => {");
        indentLevel++;
        addLine("const reviewItem = document.createElement('div');");
        addLine("reviewItem.className = 'review-item';");
        addLine("reviewItem.innerHTML = `");
        indentLevel++;
        addLine("<div class=\"review-header\">");
        addLine("<span class=\"review-author\">${review.author}</span>");
        addLine("<span class=\"review-rating\">${'★'.repeat(review.rating)}</span>");
        addLine("</div>");
        addLine("<p class=\"review-text\">${review.text}</p>");
        addLine("<span class=\"review-date\">${Utils.formatDate(review.date)}</span>");
        indentLevel--;
        addLine("`;");
        addLine("reviewsList.appendChild(reviewItem);");
        indentLevel--;
        addLine("});");
        indentLevel--;
        addLine("}");
        indentLevel--;
        addLine("}");
        indentLevel--;
        addLine("}");
        addLine("");
        addLine("// Populate related products");
        addLine("function populateRelatedProducts(category) {");
        indentLevel++;
        addLine("const relatedGrid = document.getElementById('relatedProductsGrid');");
        addLine("if (!relatedGrid) return;");
        addLine("");
        addLine("relatedGrid.innerHTML = '';");
        addLine("");
        addLine("const relatedProducts = productManager.getAllProducts().filter(p => p.category === category && p.id !== currentProductId);");
        addLine("const displayProducts = relatedProducts.slice(0, 6);");
        addLine("");
        addLine("if (displayProducts.length === 0) {");
        indentLevel++;
        addLine("relatedGrid.innerHTML = '<p>لا توجد منتجات ذات صلة</p>';");
        indentLevel--;
        addLine("} else {");
        indentLevel++;
        addLine("displayProducts.forEach(product => {");
        indentLevel++;
        addLine("const productCard = createProductCard(product);");
        addLine("relatedGrid.appendChild(productCard);");
        indentLevel--;
        addLine("});");
        indentLevel--;
        addLine("}");
        indentLevel--;
        addLine("}");
        addLine("");
        addLine("// Tab management functions");
        addLine("function switchTab(tabName) {");
        indentLevel++;
        addLine("// Hide all tab contents");
        addLine("const tabContents = document.querySelectorAll('.tab-content');");
        addLine("tabContents.forEach(content => content.classList.remove('active'));");
        addLine("");
        addLine("// Remove active class from all tab buttons");
        addLine("const tabButtons = document.querySelectorAll('.tab-btn');");
        addLine("tabButtons.forEach(btn => btn.classList.remove('active'));");
        addLine("");
        addLine("// Show selected tab content");
        addLine("const selectedContent = document.getElementById(`${tabName}-tab`);");
        addLine("if (selectedContent) selectedContent.classList.add('active');");
        addLine("");
        addLine("// Add active class to selected tab button");
        addLine("const selectedButton = document.querySelector(`[data-tab=\"${tabName}\"]`);");
        addLine("if (selectedButton) selectedButton.classList.add('active');");
        indentLevel--;
        addLine("}");
        addLine("");
        addLine("// View management functions");
        addLine("function changeView(viewType) {");
        indentLevel++;
        addLine("const gridView = document.getElementById('productsGrid');");
        addLine("const listView = document.getElementById('productsList');");
        addLine("const viewButtons = document.querySelectorAll('.view-btn');");
        addLine("");
        addLine("// Update button states");
        addLine("viewButtons.forEach(btn => btn.classList.remove('active'));");
        addLine("const activeBtn = document.querySelector(`[data-view=\"${viewType}\"]`);");
        addLine("if (activeBtn) activeBtn.classList.add('active');");
        addLine("");
        addLine("// Show/hide views");
        addLine("if (viewType === 'grid') {");
        indentLevel++;
        addLine("if (gridView) gridView.style.display = 'grid';");
        addLine("if (listView) listView.style.display = 'none';");
        indentLevel--;
        addLine("} else {");
        indentLevel++;
        addLine("if (gridView) gridView.style.display = 'none';");
        addLine("if (listView) listView.style.display = 'block';");
        indentLevel--;
        addLine("}");
        indentLevel--;
        addLine("}");
        addLine("");
        addLine("// Pagination functions");
        addLine("let currentPage = 1;");
        addLine("const productsPerPage = 12;");
        addLine("");
        addLine("function nextPage() {");
        indentLevel++;
        addLine("const totalPages = Math.ceil(productManager.getAllProducts().length / productsPerPage);");
        addLine("if (currentPage < totalPages) {");
        indentLevel++;
        addLine("currentPage++;");
        addLine("renderProducts();");
        addLine("updatePagination();");
        indentLevel--;
        addLine("}");
        indentLevel--;
        addLine("}");
        addLine("");
        addLine("function previousPage() {");
        indentLevel++;
        addLine("if (currentPage > 1) {");
        indentLevel++;
        addLine("currentPage--;");
        addLine("renderProducts();");
        addLine("updatePagination();");
        indentLevel--;
        addLine("}");
        indentLevel--;
        addLine("}");
        addLine("");
        addLine("function updatePagination() {");
        indentLevel++;
        addLine("const pageNumbers = document.getElementById('pageNumbers');");
        addLine("if (!pageNumbers) return;");
        addLine("");
        addLine("const totalProducts = productManager.getAllProducts().length;");
        addLine("const totalPages = Math.ceil(totalProducts / productsPerPage);");
        addLine("");
        addLine("pageNumbers.innerHTML = '';");
        addLine("for (let i = 1; i <= totalPages; i++) {");
        indentLevel++;
        addLine("const pageNumber = document.createElement('span');");
        addLine("pageNumber.className = `page-number ${i === currentPage ? 'active' : ''}`;");
        addLine("pageNumber.textContent = i;");
        addLine("pageNumber.onclick = () => goToPage(i);");
        addLine("pageNumbers.appendChild(pageNumber);");
        indentLevel--;
        addLine("}");
        indentLevel--;
        addLine("}");
        addLine("");
        addLine("function goToPage(page) {");
        indentLevel++;
        addLine("currentPage = page;");
        addLine("renderProducts();");
        addLine("updatePagination();");
        indentLevel--;
        addLine("}");
        addLine("");
        addLine("// Search and filter functions");
        addLine("function searchProducts(query) {");
        indentLevel++;
        addLine("const searchInput = document.getElementById('searchProducts');");
        addLine("if (searchInput) searchInput.value = query;");
        addLine("");
        addLine("const filteredProducts = productManager.getAllProducts().filter(product =>");
        indentLevel++;
        addLine("product.name.toLowerCase().includes(query.toLowerCase()) ||");
        addLine("product.description.toLowerCase().includes(query.toLowerCase()) ||");
        addLine("product.category.toLowerCase().includes(query.toLowerCase())");
        indentLevel--;
        addLine(");");
        addLine("");
        addLine("renderFilteredProducts(filteredProducts);");
        indentLevel--;
        addLine("}");
        addLine("");
        addLine("function filterByCategory(category) {");
        indentLevel++;
        addLine("const categoryFilter = document.getElementById('categoryFilter');");
        addLine("if (categoryFilter) categoryFilter.value = category;");
        addLine("");
        addLine("if (!category) {");
        indentLevel++;
        addLine("renderProducts();");
        indentLevel--;
        addLine("} else {");
        indentLevel++;
        addLine("const filteredProducts = productManager.getAllProducts().filter(product => product.category === category);");
        addLine("renderFilteredProducts(filteredProducts);");
        indentLevel--;
        addLine("}");
        indentLevel--;
        addLine("}");
        addLine("");
        addLine("function sortProducts(sortType) {");
        indentLevel++;
        addLine("const sortSelect = document.getElementById('sortProducts');");
        addLine("if (sortSelect) sortSelect.value = sortType;");
        addLine("");
        addLine("let sortedProducts = [...productManager.getAllProducts()];");
        addLine("");
        addLine("switch (sortType) {");
        indentLevel++;
        addLine("case 'newest':");
        indentLevel++;
        addLine("sortedProducts.sort((a, b) => new Date(b.createdAt) - new Date(a.createdAt));");
        addLine("break;");
        addLine("case 'oldest':");
        indentLevel++;
        addLine("sortedProducts.sort((a, b) => new Date(a.createdAt) - new Date(b.createdAt));");
        addLine("break;");
        addLine("case 'price-low':");
        indentLevel++;
        addLine("sortedProducts.sort((a, b) => a.price - b.price);");
        addLine("break;");
        addLine("case 'price-high':");
        indentLevel++;
        addLine("sortedProducts.sort((a, b) => b.price - a.price);");
        addLine("break;");
        addLine("case 'name-az':");
        indentLevel++;
        addLine("sortedProducts.sort((a, b) => a.name.localeCompare(b.name, 'ar'));");
        addLine("break;");
        addLine("case 'name-za':");
        indentLevel++;
        addLine("sortedProducts.sort((a, b) => b.name.localeCompare(a.name, 'ar'));");
        addLine("break;");
        indentLevel--;
        addLine("}");
        addLine("");
        addLine("renderFilteredProducts(sortedProducts);");
        indentLevel--;
        addLine("}");
        addLine("");
        addLine("function renderFilteredProducts(products) {");
        indentLevel++;
        addLine("const grid = document.getElementById('productsGrid');");
        addLine("if (!grid) return;");
        addLine("");
        addLine("grid.innerHTML = '';");
        addLine("products.forEach(product => {");
        indentLevel++;
        addLine("const card = createProductCard(product);");
        addLine("grid.appendChild(card);");
        indentLevel--;
        addLine("});");
        indentLevel--;
        addLine("}");
        addLine("");
        addLine("// Notification System");
        addLine("class NotificationManager {");
        indentLevel++;
        addLine("constructor() {");
        indentLevel++;
        addLine("this.notifications = [];");
        addLine("this.container = null;");
        addLine("this.init();");
        indentLevel--;
        addLine("}");
        addLine("");
        addLine("init() {");
        indentLevel++;
        addLine("// Create notification container");
        addLine("this.container = document.createElement('div');");
        addLine("this.container.className = 'notification-container';");
        addLine("this.container.style.cssText = `");
        indentLevel++;
        addLine("position: fixed;");
        addLine("top: 20px;");
        addLine("right: 20px;");
        addLine("z-index: 10000;");
        addLine("max-width: 400px;");
        addLine("direction: rtl;");
        indentLevel--;
        addLine("`;");
        addLine("document.body.appendChild(this.container);");
        indentLevel--;
        addLine("}");
        addLine("");
        addLine("show(message, type = 'info', duration = 5000) {");
        indentLevel++;
        addLine("const notification = document.createElement('div');");
        addLine("notification.className = `notification notification-${type}`;");
        addLine("notification.style.cssText = `");
        indentLevel++;
        addLine("background: ${this.getTypeColor(type)};");
        addLine("color: white;");
        addLine("padding: 15px 20px;");
        addLine("margin-bottom: 10px;");
        addLine("border-radius: 8px;");
        addLine("box-shadow: 0 4px 12px rgba(0,0,0,0.15);");
        addLine("transform: translateX(100%);");
        addLine("transition: transform 0.3s ease;");
        addLine("display: flex;");
        addLine("align-items: center;");
        addLine("gap: 10px;");
        addLine("max-width: 100%;");
        indentLevel--;
        addLine("`;");
        addLine("");
        addLine("// Add icon based on type");
        addLine("const icon = document.createElement('i');");
        addLine("icon.className = this.getTypeIcon(type);");
        addLine("notification.appendChild(icon);");
        addLine("");
        addLine("// Add message");
        addLine("const messageText = document.createElement('span');");
        addLine("messageText.textContent = message;");
        addLine("messageText.style.flex = '1';");
        addLine("notification.appendChild(messageText);");
        addLine("");
        addLine("// Add close button");
        addLine("const closeBtn = document.createElement('button');");
        addLine("closeBtn.innerHTML = '×';");
        addLine("closeBtn.style.cssText = `");
        indentLevel++;
        addLine("position: absolute;");
        addLine("top: 5px;");
        addLine("right: 5px;");
        addLine("background: rgba(220, 38, 38, 0.9);");
        addLine("color: white;");
        addLine("border: none;");
        addLine("border-radius: 50%;");
        addLine("width: 20px;");
        addLine("height: 20px;");
        addLine("cursor: pointer;");
        addLine("font-size: 14px;");
        indentLevel--;
        addLine("`;");
        addLine("closeBtn.onclick = () => this.hide(notification);");
        addLine("notification.appendChild(closeBtn);");
        addLine("");
        addLine("// Add to container");
        addLine("this.container.appendChild(notification);");
        addLine("");
        addLine("// Animate in");
        addLine("setTimeout(() => {");
        indentLevel++;
        addLine("notification.style.transform = 'translateX(0)';");
        indentLevel--;
        addLine("}, 100);");
        addLine("");
        addLine("// Auto-hide after duration");
        addLine("if (duration > 0) {");
        indentLevel++;
        addLine("setTimeout(() => this.hide(notification), duration);");
        indentLevel--;
        addLine("}");
        addLine("");
        addLine("return notification;");
        indentLevel--;
        addLine("}");
        addLine("");
        addLine("hide(notification) {");
        indentLevel++;
        addLine("notification.style.transform = 'translateX(100%)';");
        addLine("setTimeout(() => {");
        indentLevel++;
        addLine("if (notification.parentNode) {");
        indentLevel++;
        addLine("notification.parentNode.removeChild(notification);");
        indentLevel--;
        addLine("}");
        indentLevel--;
        addLine("}, 300);");
        indentLevel--;
        addLine("}");
        addLine("");
        addLine("getTypeColor(type) {");
        indentLevel++;
        addLine("switch (type) {");
        indentLevel++;
        addLine("case 'success': return '#16a34a';");
        addLine("case 'error': return '#dc2626';");
        addLine("case 'warning': return '#ca8a04';");
        addLine("case 'info': return '#0891b2';");
        addLine("default: return '#64748b';");
        indentLevel--;
        addLine("}");
        indentLevel--;
        addLine("}");
        addLine("");
        addLine("getTypeIcon(type) {");
        indentLevel++;
        addLine("switch (type) {");
        indentLevel++;
        addLine("case 'success': return 'fas fa-check-circle';");
        addLine("case 'error': return 'fas fa-exclamation-circle';");
        addLine("case 'warning': return 'fas fa-exclamation-triangle';");
        addLine("case 'info': return 'fas fa-info-circle';");
        addLine("default: return 'fas fa-bell';");
        indentLevel--;
        addLine("}");
        indentLevel--;
        addLine("}");
        indentLevel--;
        addLine("}");
        addLine("");
        addLine("// Enhanced Event Handlers");
        addLine("class EnhancedEventHandlers {");
        indentLevel++;
        addLine("constructor() {");
        indentLevel++;
        addLine("this.notificationManager = new NotificationManager();");
        addLine("this.bindEvents();");
        indentLevel--;
        addLine("}");
        addLine("");
        addLine("bindEvents() {");
        indentLevel++;
        addLine("// Form submission with validation");
        addLine("const addProductForm = document.getElementById('addProductForm');");
        addLine("if (addProductForm) {");
        indentLevel++;
        addLine("addProductForm.addEventListener('submit', (e) => this.handleFormSubmit(e));");
        indentLevel--;
        addLine("}");
        addLine("");
        addLine("// Search and filter events");
        addLine("const searchInput = document.getElementById('searchProducts');");
        addLine("if (searchInput) {");
        indentLevel++;
        addLine("searchInput.addEventListener('input', (e) => this.handleSearch(e.target.value));");
        indentLevel--;
        addLine("}");
        addLine("");
        addLine("const categoryFilter = document.getElementById('categoryFilter');");
        addLine("if (categoryFilter) {");
        indentLevel++;
        addLine("categoryFilter.addEventListener('change', (e) => this.handleCategoryFilter(e.target.value));");
        indentLevel--;
        addLine("}");
        addLine("");
        addLine("const sortSelect = document.getElementById('sortProducts');");
        addLine("if (sortSelect) {");
        indentLevel++;
        addLine("sortSelect.addEventListener('change', (e) => this.handleSort(e.target.value));");
        indentLevel--;
        addLine("}");
        addLine("");
        addLine("// Image upload handling");
        addLine("const imageUploadArea = document.getElementById('imageUploadArea');");
        addLine("if (imageUploadArea) {");
        indentLevel++;
        addLine("imageUploadArea.addEventListener('click', () => this.handleImageUploadClick());");
        addLine("imageUploadArea.addEventListener('dragover', (e) => this.handleDragOver(e));");
        addLine("imageUploadArea.addEventListener('drop', (e) => this.handleDrop(e));");
        indentLevel--;
        addLine("}");
        addLine("");
        addLine("// Keyboard shortcuts");
        addLine("document.addEventListener('keydown', (e) => this.handleKeyboardShortcuts(e));");
        indentLevel--;
        addLine("}");
        addLine("");
        addLine("handleFormSubmit(e) {");
        indentLevel++;
        addLine("e.preventDefault();");
        addLine("");
        addLine("const formData = new FormData(e.target);");
        addLine("const productData = {");
        indentLevel++;
        addLine("name: formData.get('productName'),");
        addLine("description: formData.get('productDescription'),");
        addLine("price: parseFloat(formData.get('productPrice')),");
        addLine("category: formData.get('productCategory'),");
        addLine("stock: parseInt(formData.get('productStock')) || 0,");
        addLine("brand: formData.get('productBrand'),");
        addLine("model: formData.get('productModel'),");
        addLine("weight: parseFloat(formData.get('productWeight')) || 0,");
        addLine("dimensions: formData.get('productDimensions'),");
        addLine("features: formData.get('productFeatures')?.split('\\n').filter(f => f.trim()) || []");
        indentLevel--;
        addLine("};");
        addLine("");
        addLine("// Validation");
        addLine("if (!this.validateProductData(productData)) {");
        indentLevel++;
        addLine("return;");
        indentLevel--;
        addLine("}");
        addLine("");
        addLine("// Add product");
        addLine("const product = productManager.addProduct(productData);");
        addLine("");
        addLine("// Show success notification");
        addLine("this.notificationManager.show('تم إضافة المنتج بنجاح!', 'success');");
        addLine("");
        addLine("// Reset form");
        addLine("e.target.reset();");
        addLine("");
        addLine("// Navigate to products view");
        addLine("stateManager.navigateTo('products');");
        addLine("");
        addLine("// Update UI");
        addLine("this.updateUIAfterProductChange();");
        indentLevel--;
        addLine("}");
        addLine("");
        addLine("validateProductData(data) {");
        indentLevel++;
        addLine("const errors = [];");
        addLine("");
        addLine("if (!data.name || data.name.trim().length < 2) {");
        indentLevel++;
        addLine("errors.push('اسم المنتج يجب أن يكون 3 أحرف على الأقل');");
        indentLevel--;
        addLine("}");
        addLine("");
        addLine("if (!data.description || data.description.trim().length < 10) {");
        indentLevel++;
        addLine("errors.push('وصف المنتج يجب أن يكون 10 أحرف على الأقل');");
        indentLevel--;
        addLine("}");
        addLine("");
        addLine("if (!data.price || data.price <= 0) {");
        indentLevel++;
        addLine("errors.push('السعر يجب أن يكون أكبر من صفر');");
        indentLevel--;
        addLine("}");
        addLine("");
        addLine("if (!data.category) {");
        indentLevel++;
        addLine("errors.push('يجب اختيار فئة المنتج');");
        indentLevel--;
        addLine("}");
        addLine("");
        addLine("if (errors.length > 0) {");
        indentLevel++;
        addLine("errors.forEach(error => {");
        indentLevel++;
        addLine("this.notificationManager.show(error, 'error');");
        indentLevel--;
        addLine("});");
        addLine("return false;");
        indentLevel--;
        addLine("}");
        addLine("");
        addLine("return true;");
        indentLevel--;
        addLine("}");
        addLine("");
        addLine("handleSearch(query) {");
        indentLevel++;
        addLine("if (query.length >= 2 || query.length === 0) {");
        indentLevel++;
        addLine("stateManager.setFilter('search', query);");
        indentLevel--;
        addLine("}");
        indentLevel--;
        addLine("}");
        addLine("");
        addLine("handleCategoryFilter(category) {");
        indentLevel++;
        addLine("stateManager.setFilter('category', category);");
        indentLevel--;
        addLine("}");
        addLine("");
        addLine("handleSort(sortType) {");
        indentLevel++;
        addLine("stateManager.setFilter('sortBy', sortType);");
        indentLevel--;
        addLine("}");
        addLine("");
        addLine("handleImageUploadClick() {");
        indentLevel++;
        addLine("const fileInput = document.getElementById('productImages');");
        addLine("if (fileInput) {");
        indentLevel++;
        addLine("fileInput.click();");
        indentLevel--;
        addLine("}");
        indentLevel--;
        addLine("}");
        addLine("");
        addLine("handleDragOver(e) {");
        indentLevel++;
        addLine("e.preventDefault();");
        addLine("e.currentTarget.style.borderColor = '#2563eb';");
        addLine("e.currentTarget.style.background = '#eff6ff';");
        indentLevel--;
        addLine("}");
        addLine("");
        addLine("handleDrop(e) {");
        indentLevel++;
        addLine("e.preventDefault();");
        addLine("e.currentTarget.style.borderColor = '#e2e8f0';");
        addLine("e.currentTarget.style.background = 'white';");
        addLine("");
        addLine("const files = Array.from(e.dataTransfer.files);");
        addLine("this.processImageFiles(files);");
        indentLevel--;
        addLine("}");
        addLine("");
        addLine("processImageFiles(files) {");
        indentLevel++;
        addLine("const imageFiles = files.filter(file => file.type.startsWith('image/'));");
        addLine("");
        addLine("if (imageFiles.length === 0) {");
        indentLevel++;
        addLine("this.notificationManager.show('يرجى اختيار ملفات صور صحيحة', 'warning');");
        addLine("return;");
        indentLevel--;
        addLine("}");
        addLine("");
        addLine("// Process and preview images");
        addLine("imageFiles.forEach(file => {");
        indentLevel++;
        addLine("const reader = new FileReader();");
        addLine("reader.onload = (e) => this.addImagePreview(e.target.result, file.name);");
        addLine("reader.readAsDataURL(file);");
        indentLevel--;
        addLine("});");
        addLine("");
        addLine("this.notificationManager.show(`تم إضافة ${imageFiles.length} صورة`, 'success');");
        indentLevel--;
        addLine("}");
        addLine("");
        addLine("addImagePreview(src, name) {");
        indentLevel++;
        addLine("const previewContainer = document.getElementById('imagePreview');");
        addLine("if (!previewContainer) return;");
        addLine("");
        addLine("const previewItem = document.createElement('div');");
        addLine("previewItem.className = 'image-preview-item';");
        addLine("previewItem.style.cssText = `");
        indentLevel++;
        addLine("position: relative;");
        addLine("width: 100px;");
        addLine("height: 100px;");
        addLine("border-radius: 8px;");
        addLine("overflow: hidden;");
        addLine("border: 2px solid #e2e8f0;");
        indentLevel--;
        addLine("`;");
        addLine("");
        addLine("const img = document.createElement('img');");
        addLine("img.src = src;");
        addLine("img.style.cssText = 'width: 100%; height: 100%; object-fit: cover;';");
        addLine("previewItem.appendChild(img);");
        addLine("");
        addLine("const removeBtn = document.createElement('button');");
        addLine("removeBtn.innerHTML = '×';");
        addLine("removeBtn.style.cssText = `");
        indentLevel++;
        addLine("position: absolute;");
        addLine("top: 5px;");
        addLine("right: 5px;");
        addLine("background: rgba(220, 38, 38, 0.9);");
        addLine("color: white;");
        addLine("border: none;");
        addLine("border-radius: 50%;");
        addLine("width: 20px;");
        addLine("height: 20px;");
        addLine("cursor: pointer;");
        addLine("font-size: 14px;");
        indentLevel--;
        addLine("`;");
        addLine("removeBtn.onclick = () => previewItem.remove();");
        addLine("previewItem.appendChild(removeBtn);");
        addLine("");
        addLine("previewContainer.appendChild(previewItem);");
        indentLevel--;
        addLine("}");
        addLine("");
        addLine("handleKeyboardShortcuts(e) {");
        indentLevel++;
        addLine("// Ctrl/Cmd + K for search");
        addLine("if ((e.ctrlKey || e.metaKey) && e.key === 'k') {");
        indentLevel++;
        addLine("e.preventDefault();");
        addLine("const searchInput = document.getElementById('searchProducts');");
        addLine("if (searchInput) searchInput.focus();");
        indentLevel--;
        addLine("}");
        addLine("");
        addLine("// Ctrl/Cmd + N for new product");
        addLine("if ((e.ctrlKey || e.metaKey) && e.key === 'n') {");
        indentLevel++;
        addLine("e.preventDefault();");
        addLine("stateManager.navigateTo('add-product');");
        indentLevel--;
        addLine("}");
        addLine("");
        addLine("// Escape to close modals/forms");
        addLine("if (e.key === 'Escape') {");
        indentLevel++;
        addLine("this.closeAllModals();");
        indentLevel--;
        addLine("}");
        indentLevel--;
        addLine("}");
        addLine("");
        addLine("closeAllModals() {");
        indentLevel++;
        addLine("// Close any open modals or forms");
        addLine("const modals = document.querySelectorAll('.modal, .form-overlay');");
        addLine("modals.forEach(modal => {");
        indentLevel++;
        addLine("modal.style.display = 'none';");
        indentLevel--;
        addLine("});");
        indentLevel--;
        addLine("}");
        addLine("");
        addLine("updateUIAfterProductChange() {");
        indentLevel++;
        addLine("// Update product count");
        addLine("const productCount = document.getElementById('productCount');");
        addLine("if (productCount) {");
        indentLevel++;
        addLine("productCount.textContent = productManager.getAllProducts().length;");
        indentLevel--;
        addLine("}");
        addLine("");
        addLine("// Refresh products display");
        addLine("if (stateManager.getState('navigation').currentSection === 'products') {");
        indentLevel++;
        addLine("renderProducts();");
        indentLevel--;
        addLine("}");
        indentLevel--;
        addLine("}");
        indentLevel--;
        addLine("}");
        addLine("");
        addLine("// Initialize enhanced event handlers");
        addLine("const enhancedEventHandlers = new EnhancedEventHandlers();");
        addLine("");
        addLine("// Make functions globally available");
        addLine("window.ProductOperations = ProductOperations;");
        addLine("window.EventHandlers = EventHandlers;");
        addLine("window.Utils = Utils;");
        addLine("window.productManager = productManager;");
        addLine("window.stateManager = stateManager;");
        addLine("window.switchTab = switchTab;");
        addLine("window.changeView = changeView;");
        addLine("window.nextPage = nextPage;");
        addLine("window.previousPage = previousPage;");
        addLine("window.searchProducts = searchProducts;");
        addLine("window.filterByCategory = filterByCategory;");
        addLine("window.sortProducts = sortProducts;");
        addLine("");
        indentLevel--;
        addLine("})();");
    }

    /**
     * Add line with proper indentation
     */
    private void addLine(String line) {
        for (int i = 0; i < indentLevel; i++) {
            jsBuilder.append(indentation);
        }
        jsBuilder.append(line).append("\n");
    }

    /**
     * Reset generator for new generation
     */
    public void reset() {
        jsBuilder.setLength(0);
        indentLevel = 0;
    }

    /**
     * Get current JavaScript content
     */
    public String getCurrentJavaScript() {
        return jsBuilder.toString();
    }
}
